<button
	id="themeToggle"
	type="button"
	role="switch"
	aria-label="Toggle dark mode"
	aria-pressed="false"
	aria-describedby="theme-status"
	data-testid="theme-toggle"
>
	<svg
		width="24px"
		xmlns="http://www.w3.org/2000/svg"
		viewBox="0 0 24 24"
		stroke-width="1.5"
		aria-hidden="true"
	>
		<path
			class="moon"
			stroke-linecap="round"
			stroke-linejoin="round"
			d="M21.752 15.002A9.72 9.72 0 0 1 18 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 0 0 3 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 0 0 9.002-5.998Z"
		></path>
		<path
			class="sun"
			stroke-linecap="round"
			stroke-linejoin="round"
			stroke="currentColor"
			d="M12 3v2.25m6.364.386-1.591 1.591M21 12h-2.25m-.386 6.364-1.591-1.591M12 18.75V21m-4.773-4.227-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 1 1-7.5 0 3.75 3.75 0 0 1 7.5 0Z"
		></path>
	</svg>
	<span class="sr-only">Toggle between light and dark theme</span>
</button>

<div id="theme-status" class="sr-only" aria-live="polite">Light theme active</div>

<style>
	#themeToggle {
		border: 0;
		background: none;
		min-width: 44px;
		min-height: 44px;
		display: flex;
		align-items: center;
		justify-content: center;
		cursor: pointer;
		transition: transform 0.2s ease;
	}

	#themeToggle:hover {
		transform: scale(1.05);
	}

	#themeToggle:active {
		transform: scale(0.95);
	}

	svg {
		transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}

	.sun {
		fill: transparent;
		stroke: transparent;
		transform-origin: center;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}

	.moon {
		fill: transparent;
		stroke: transparent;
		transform-origin: center;
		transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
	}

	:global(.js-loaded) .sun {
		fill: currentColor;
		stroke: currentColor;
		opacity: 1;
		transform: scale(1) rotate(0deg);
	}

	:global(.js-loaded.dark) .sun {
		fill: transparent;
		stroke: transparent;
		opacity: 0;
		transform: scale(0.8) rotate(180deg);
	}

	:global(.js-loaded.dark) .moon {
		fill: white;
		stroke: white;
		opacity: 1;
		transform: scale(1) rotate(0deg);
	}

	:global(.js-loaded:not(.dark)) .moon {
		opacity: 0;
		transform: scale(0.8) rotate(-180deg);
	}

	@keyframes sunRayRotate {
		from {
			transform: scale(1) rotate(0deg);
		}
		to {
			transform: scale(1) rotate(360deg);
		}
	}

	:global(.js-loaded:not(.dark)) .sun {
		animation: sunRayRotate 20s linear infinite;
	}

	.sr-only {
		position: absolute;
		width: 1px;
		height: 1px;
		padding: 0;
		margin: -1px;
		overflow: hidden;
		clip: rect(0, 0, 0, 0);
		white-space: nowrap;
		border: 0;
	}
</style>

<script>
	document.addEventListener('astro:page-load', () => {
		const localStorageTheme = localStorage?.getItem('theme');
		const { matches: prefersDark } = window.matchMedia('(prefers-color-scheme: dark)');
		const initialTheme = localStorageTheme ?? (prefersDark ? 'dark' : 'light');
		const isInitialDark = initialTheme === 'dark';
		document.documentElement.classList.add('js-loaded');
		document.documentElement.classList.toggle('dark', isInitialDark);
		document.documentElement.setAttribute('data-theme', initialTheme);

		const themeToggleElement = document.getElementById('themeToggle');
		const themeStatusElement = document.getElementById('theme-status');

		const updateAccessibilityAttributes = (isDark: boolean) => {
			if (themeToggleElement) {
				themeToggleElement.setAttribute('aria-pressed', isDark.toString());
				themeToggleElement.setAttribute(
					'aria-label',
					isDark ? 'Switch to light mode' : 'Switch to dark mode'
				);
			}
			if (themeStatusElement) {
				themeStatusElement.textContent = isDark ? 'Dark theme active' : 'Light theme active';
			}
		};

		// Set initial accessibility state
		updateAccessibilityAttributes(isInitialDark);

		const handleToggle = () => {
			const el = document.documentElement;
			const currentTheme = el.getAttribute('data-theme');
			const isDark = currentTheme === 'dark' || (currentTheme === 'system' && isInitialDark);
			const newTheme = isDark ? 'light' : 'dark';
			const newIsDark = !isDark;

			el.setAttribute('data-theme', newTheme);
			el.classList.toggle('dark', newIsDark);
			localStorage.setItem('theme', newTheme);
			updateAccessibilityAttributes(newIsDark);
		};

		if (themeToggleElement) {
			themeToggleElement.addEventListener('click', handleToggle);
		}
	});
</script>
