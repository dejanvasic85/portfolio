<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

	<!-- generator="WordPress.com" created="2025-04-28 12:32"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Software engineering notebook</title>
	<link>https://dejanvasic.wordpress.com</link>
	<description>Sharing solutions to some problems that documentation or stackoverflow did not have (at the time)...</description>
	<pubDate>Mon, 28 Apr 2025 12:32:29 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://dejanvasic.wordpress.com</wp:base_blog_url>

		<wp:author><wp:author_id>18231012</wp:author_id><wp:author_login><![CDATA[dejanvasic]]></wp:author_login><wp:author_email><![CDATA[dejanvasic24@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[Dejan]]></wp:author_display_name><wp:author_first_name><![CDATA[Dejan]]></wp:author_first_name><wp:author_last_name><![CDATA[Vasic]]></wp:author_last_name></wp:author>

				
	<generator>http://wordpress.com/</generator>

<image>
	<url>https://dejanvasic.wordpress.com/wp-content/uploads/2021/04/cropped-img_20180703_172233090-pano.jpg?w=32</url>
	<title>Software engineering notebook</title>
	<link>https://dejanvasic.wordpress.com</link>
	<width>32</width>
	<height>32</height>
</image> 

		<item>
		<title><![CDATA[AngularJs Password Strength Indicator with Bootstrap]]></title>
		<link>https://dejanvasic.wordpress.com/2015/02/07/angularjs-password-strength-indicator/</link>
		<pubDate>Sat, 07 Feb 2015 02:15:41 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=478</guid>
		<description></description>
		<content:encoded><![CDATA[Don't need the details on how to build it? Then here's the plunk:
http://plnkr.co/edit/oZhqny?p=info

Yea, <a href="https://github.com/subarroca/ng-password-strength">I know someone has already built one</a> that looks slightly different, but I couldn't quite get it working because of a fundamental flaw in the way Angular JS updates the model. Or doesn't, by having the ng-pattern validator setting the password model as undefined and the strength indicator fails miserably as soon as the validation kicks in.

I kept thinking there's something wrong with ng-password-strength so in the end, I decided to build my own indicator from scratch by being inspired by stackoverflow answer http://stackoverflow.com/a/21833310/971085. Shouldn't be too hard for someone that had little experience with Angular right? Hmm, wrong. Or maybe I'm just a very very slow learner.

So here's my guide on how I built an indicator that works with pattern validator also.

First, the html:
[gist https://gist.github.com/dejanvasic85/3c6391fdca6e45d2fcc4/]

Very simple bootstrap form with a normal text input. The key to the html, is that we need the ability to move the directive anywhere in our html without embedding other validation inside it. Unlike the <a href="http://stackoverflow.com/a/21833310/971085">stackoverflow post</a>, which ends up having regex validation and strength validation in one.

On to Javascript:
[gist https://gist.github.com/dejanvasic85/bc82173413fa7120824f/]

The passwordStrength directive is very simple. It requires the ngModel directive to specify which model (scope property) we need to watch when it changes.

<strong>Make note</strong> of [scope : {password : "=ngModel"}]. It took a very long time to figure out how to get the ngModel value in to our scope. Somehow, I dug through google to eventually find this and it made me pull hairs out because it felt like another hidden feature! This is the point when my hatred toward AngularJS grows a little more ...

The scope.$watch method does all the work, and this is very simple. It gets the new password value and determines the strength and stores it on the scope. The directive template has the bootstrap progress bars and displays each based on the strength value 1/2/3 or 4.

[code language="JavaScript"]
template: '&lt;div class=&quot;progress&quot;&gt;' +
          '&lt;div class=&quot;progress-bar progress-bar-danger&quot; style=&quot;width: {{strength &gt;= 1 ? 25 : 0}}%&quot;&gt;&lt;/div&gt;' +
          '&lt;div class=&quot;progress-bar progress-bar-warning&quot; style=&quot;width: {{strength &gt;= 2 ? 25 : 0}}%&quot;&gt;&lt;/div&gt;' +
          '&lt;div class=&quot;progress-bar progress-bar-warning&quot; style=&quot;width: {{strength &gt;= 3 ? 25 : 0}}%&quot;&gt;&lt;/div&gt;' +
          '&lt;div class=&quot;progress-bar progress-bar-success&quot; style=&quot;width: {{strength &gt;= 4 ? 25 : 0}}%&quot;&gt;&lt;/div&gt;' +
          '&lt;/div&gt;'
[/code]

So, at this point we have pretty much replicated the <a href="https://github.com/subarroca/ng-password-strength">ng-password-strength</a> except with a different template and logic but same idea. At this point I decided to include ng-pattern validation directive from Angular itself and I placed it inside the password field and that way we have the form validation working.

However, when you start typing in the password box the password strength indicator fails to display anything. The reason for this is (in my opinion), very silly and un-obvious. The ng-pattern directive marks the element as $dirty and $invalid which prints the validation message - nice. But, the password value on the scope is now undefined which makes our password indicator useless! This also took a very long time to figure out.

The fix in the end was to have my own patterValidator. This also, requires the ngModel and this time a 4th parameter in the link function is required which is the ngModel Controller!

To use this controller I found once again, very confusing and complex!

The key line is:

[code language="JavaScript"]
ctrl.$parsers.unshift(function(viewValue){});
[/code]

From what I can tell, there is a $parsers array property on the controller. We need to add our function at the beginning of that array by doing the unshift. So our function takes the newValue and apparently this will get hit every time the password changes. Once again, <strong>I found a key syntax in Angular that has very little documentation</strong>. Another sign of a <strong>'bad' framework</strong>. <strong>Things like this should very simple to do and obvious even to beginner developers.</strong>

Finally, the key fix...

<strong>Thing to remember: AngularJS in all of their validation directives return undefined which sets the model as undefined if the value is not Valid</strong>. I imagine it would look something like:

[code language="JavaScript"]
return isValid ? viewValue : undefined
[/code]

Why not just return viewValue?! It should be up to the developer to determine whether the form submit should go ahead even with invalid values. If it goes to the server, there should be server validation anyway to protect the data. Oh, what a day...

Thanks.
Happy Coding.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>478</wp:post_id>
		<wp:post_date><![CDATA[2015-02-07 13:15:41]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-02-07 02:15:41]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2015-02-07 14:37:07]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2015-02-07 03:37:07]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[angularjs-password-strength-indicator]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_859ab767aa9f72aef188adca2b78a6d8]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a0786614daff442e4f5abe979a95cd2a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_facebook]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_linkedin]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_tumblr]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_path]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_13d4b0cbc3b89882ca07e497329bc2fa]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_google_plus_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://plus.google.com/106471436956345565008/posts/HAXyV57CiH2]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_9777069]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:11:"google_plus";a:1:{s:21:"106471436956345565008";b:1;}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[http://t.co/QuHxP1P9YN]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_303db80229b9fe65523d4db682bfd749]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_46e9f8a9006b608272110e8a63b6596e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_545beec7f550fc7d2234a44f748ba613]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_1e16866dd722cfbdf1ae6898305808ee]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a8ad3ed98bf3793d6fd60ac3406f182c]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d4c7d58056d9cff471345a6240970fda]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe title="Angular Password Strength" class="wp-embedded-content" sandbox="allow-scripts" security="restricted" src="https://embed.plnkr.co/plunk/oZhqny?autoCloseSidebar&#038;deferRun&#038;show=preview#?secret=PQ50b3RXhA" data-secret="PQ50b3RXhA" width="809" height="1000" frameborder="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_d4c7d58056d9cff471345a6240970fda]]></wp:meta_key>
		<wp:meta_value><![CDATA[1571892628]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5848d55a90d354f10d28037c27f0f45c]]></wp:meta_key>
		<wp:meta_value><![CDATA[<iframe class="wp-embedded-content" sandbox="allow-scripts" security="restricted" title="Angular Password Strength" src="https://embed.plnkr.co/plunk/oZhqny?autoCloseSidebar&#038;deferRun&#038;show=preview#?secret=KXrN7vdRJa" data-secret="KXrN7vdRJa" width="580" height="870" frameborder="0" scrolling="no"></iframe>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_5848d55a90d354f10d28037c27f0f45c]]></wp:meta_key>
		<wp:meta_value><![CDATA[1578221902]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2069518e63cbb4ec06b1b977d6020075]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_ee585ef63b6fed163c3e0ce61930c604]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_57917949676b5eec1f35915db945d76b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[Iker Aguayo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ikeraguayo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.158.17.39]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-03-01 21:33:12]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-03-01 10:33:12]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Use ng-attr-style instead of style and it will work in IE]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>153</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1488364392]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1488364392.211143970489501953125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"ikercrg";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1488364392]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>130</wp:comment_id>
			<wp:comment_author><![CDATA[KArthik]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[raghulkarthik@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[162.119.3.119]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-04-27 14:17:19]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-04-27 03:17:19]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[great directive. Worked like a charm. But i was wondering, how would you display text like "weak" "strong" "very Strong" under the password meter? Any thoughts??]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1462171847]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461732207.2323329448699951171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1462171847]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1462171847.81320095062255859375;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"dejanvasic";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1461727040.0850698947906494140625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>137</wp:comment_id>
			<wp:comment_author><![CDATA[Dejan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dejanvasic24@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://dejanvasic.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[49.199.112.75]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-08-12 10:18:50]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-08-11 23:18:50]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yeh that's pretty easy to do. I will update the plunker in next few days.]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>130</wp:comment_parent>
			<wp:comment_user_id>18231012</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1470957532]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1470957531.940907955169677734375;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"dejanvasic";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1470957531]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>136</wp:comment_id>
			<wp:comment_author><![CDATA[xkeshavshav]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[xkeshav@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/xkeshav</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[27.109.19.106]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2016-08-11 20:44:16]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2016-08-11 09:44:16]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is really very helpful and easy to implement . Thanks a lot]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1470957464]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1470913906.447844028472900390625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"xkeshav";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1470957464]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1470957465.1866209506988525390625;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"dejanvasic";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1470908657.465712070465087890625;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"xkeshav";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[Iker Aguayo]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[ikeraguayo@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[193.158.17.39]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-03-01 02:38:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-02-28 15:38:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[It does not work in internet Explorer 11.

But in Chrome is great. Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>136</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1488296334.408587932586669921875;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"ikercrg";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1488315490]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1488299966.437736988067626953125;s:5:"event";s:9:"check-ham";s:4:"user";s:7:"ikercrg";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1488315490]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1488315490.9889628887176513671875;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"dejanvasic";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>158</wp:comment_id>
			<wp:comment_author><![CDATA[Dejan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dejanvasic24@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://dejanvasic.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[210.10.223.250]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2017-03-09 12:26:38]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2017-03-09 01:26:38]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good find. Thanks!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>153</wp:comment_parent>
			<wp:comment_user_id>18231012</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1489022799]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1489022800.06276607513427734375;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"dejanvasic";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1489022800]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Abstracting session data with custom lifetime managers]]></title>
		<link>https://dejanvasic.wordpress.com/2016/07/10/abstracting-session-data-with-custom-lifetime-managers/</link>
		<pubDate>Sun, 10 Jul 2016 11:29:38 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=509</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

Yes, there's many ways of abstracting the HttpContext and Session objects that make our MVC Controllers "more" testable. Unless of course the HttpContextBase is injected that can also be mocked.

The more obvious method is the very simple ISession or similar named interface which the concrete implementation that would access the HttpContext directly (see last file in the gist). The obvious disadvantage here is hardcoded session key names and this can get very messy particularly across multiple controllers or other server side components. Some would argue that constants may do the trick and that's absolutely all fine.

I found that managing more complex objects can be a lot neater by allowing unity to manage the lifetime (could be session or any other store) and then simply injecting in our controllers would give us access to all of it's properties/methods!

For example:

public class BookingData {
public DateTime StartDate{get;set;}
}

public class HomeController( BookingData bookingData ) {
_bookingData = bookingData;
}

The "SessionLifetimeManager" implementation (see gist below) would create a new BookingData object for us and inject it to the HomeController automatically. To register this object now is simply a matter of:

public void UnityConfig(IUnityContainer container) {
container.RegisterType&lt;BookingData&gt;(new SessionLifetimeManager&lt;BookingData&gt;());
}

&nbsp;

Here's the full gist:

https://gist.github.com/dejanvasic85/59184570ef7a2119c4993a839dceea37

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>509</wp:post_id>
		<wp:post_date><![CDATA[2016-07-10 22:29:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-07-10 11:29:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-07-10 23:07:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-07-10 12:07:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[abstracting-session-data-with-custom-lifetime-managers]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="net"><![CDATA[.Net]]></category>
		<category domain="category" nicename="asp-net"><![CDATA[ASP.Net]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[24646258780]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:58:"https://twitter.com/dejanvasic85/status/752102502493933568";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d3496cf1f549e7ccc931f6227e7ed95b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Selenium WebElement to middle of page]]></title>
		<link>https://dejanvasic.wordpress.com/2016/09/26/selenium-webelement-to-middle-of-page/</link>
		<pubDate>Sun, 25 Sep 2016 13:04:32 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=588</guid>
		<description></description>
		<content:encoded><![CDATA[Having a sticky header and/or sticky footer in a web page is not uncommon these days particularly with the help of open-source CSS frameworks like bootstrap or foundation and thousands of others that people haven't had the pleasure of working with.

Enabling this feature though can be a pain when it comes to using test automation tools such as Selenium WebDriver because when calling an action on the element like Click() the driver will attempt to put the element either on top of the page or the bottom.

Almost always (depending on the size of elements and clicking area), the sticky header or footer will appear in-front of the desired element and that will cause an exception, so the best outcome is to put the element in the middle of the page. How do we do this? Well, among thousands of solutions out there... I realised that there's nothing really simple and robust so once again I rolled out my own which is a very simple one liner (see gist).

One catch! You will need jQuery... but I'm certain you have it references already :)

&nbsp;

https://gist.github.com/dejanvasic85/3937d5ddd7f014f7f7026bdaeec24bb6

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>588</wp:post_id>
		<wp:post_date><![CDATA[2016-09-26 00:04:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-09-25 13:04:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2016-09-26 00:04:32]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2016-09-25 13:04:32]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[selenium-webelement-to-middle-of-page]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_google_plus_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://plus.google.com/+DejanVasic/posts/bvgsgcoQqHx]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[27192373157]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:58:"https://twitter.com/dejanvasic85/status/780030247676710912";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734327]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_9777069]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Google Map GeoComplete with Selenium]]></title>
		<link>https://dejanvasic.wordpress.com/2017/07/31/google-map-geocomplete-with-selenium/</link>
		<pubDate>Mon, 31 Jul 2017 12:02:50 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=621</guid>
		<description></description>
		<content:encoded><![CDATA[Recently I attempted to upgrade the selenium webdriver on a .Net pet project. The versions selected are in the package.json file in the gist.

Everything went quite smoothly until it came to selecting an address from the google maps using the GeoComplete component. Previously (see Old.cs), it was quite simple clicking on the pac-item elements. But the click stopped working in every way possible. Even attempting this using jQuery and native JavaScript was impossible. Nothing happens!

So, the pac-container and pac-items solution had to be thrown out. After trying to downgrade some of the packages, there were other problems encountered like having to also downgrade the actual browser versions. Not ideal!

Then, it came to me. We don't have to always simulate clicks. And this component is very keyboard friendly. So, why don't we just SendKeys instead? Yes, that works perfect :)

See New.cs for the solution.

https://gist.github.com/dejanvasic85/e838d8434899852b32474a31246b89e1]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>621</wp:post_id>
		<wp:post_date><![CDATA[2017-07-31 23:02:50]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2017-07-31 12:02:50]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2017-07-31 23:02:50]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2017-07-31 12:02:50]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[google-map-geocomplete-with-selenium]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_google_plus_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://plus.google.com/+DejanVasic/posts/Nvvh93aD9JV]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[7709569331]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:58:"https://twitter.com/dejanvasic85/status/891992564538200065";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734327]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_9777069]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_f88e2138a367426df011035a24c96d74]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Node on Docker using AWS Fargate]]></title>
		<link>https://dejanvasic.wordpress.com/2018/04/01/node-on-docker-using-aws-fargate/</link>
		<pubDate>Sun, 01 Apr 2018 02:51:54 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=649</guid>
		<description></description>
		<content:encoded><![CDATA[<h2>ExpressJS and TypeScript</h2>
JavaScript is the most popular language today which is evident in the surveys conducted by stackoverflow and github repository statistics. Another reason for the selection was a personal attachment I have to it by using it on a daily basis at my workplace. As the application gets bigger though, the need for static type checking also grows. On too many occasions, bugs were introduced because of parameter mismatch and unit testing doesn't cover this. Flow was our answer to this problem, but Typescript was used here for experiment sake.

To get started, I just had to install it globally using npm:

<code>npm install -g typescript</code>

The basic build configuration for TypeScript looks as follows which should be stored in a file called tsconfig.json at the root level of the directory:

https://gist.github.com/dejanvasic85/b276a5ff9e4baf59571377c4e33fafd7

&nbsp;

The rest is very simple, at the root of the project a simple <code>tsc</code> command will transpile everything in to the dist folder. Application is so simple you can just check it out in the github repository:

https://github.com/dejanvasic85/venue-api/tree/master/src
<h2><b>Docker</b></h2>
Given all the cloud offerings today, there's obviously a variety of ways to write, test and deploy an application. For example, <a href="https://serverless.com/">serverless framework </a>gives us an easy way to write <a href="https://aws.amazon.com/lambda">AWS lambdas</a> that are deployed and exposed via an AWS Gateway which is pretty cool so docker doesn't have any part to play. Unfortunately, this would mean a vendor lock-in situation so it would be very difficult to migrate to another cloud provider.

Hence, my choice of a deployment strategy supported by all providers. Docker!

Docker with node, is so simple and lightweight that the docker file is simple as:

https://gist.github.com/dejanvasic85/8b452242eeaab3e877617dabfcd89331

When I signed up to AWS, it was very simple steps to follow for building, tagging andpublishing it in the internal docker repository. But going a step further, travis should be able to do this for us.
<h2><strong>Travis</strong></h2>
My choice to use travis was quite simple. It's free for open source projects and simple as a one toggle switch on my profile page.

<img class="alignnone size-full wp-image-656" src="https://dejanvasic.wordpress.com/wp-content/uploads/2018/04/screen-shot-2018-04-01-at-11-30-27-am.png" alt="Screen Shot 2018-04-01 at 11.30.27 am" width="1056" height="326" />

This tells travis, on every commit to look for a <code>.travis.yml</code> file in the root directory of the repo. And oh boy, was this another simple thing to put together. By marking the language as <code>node_js</code>, travis automatically knows to run commands such as <code>npm install</code> and <code>npm test</code>. The other 'services' you can specify is docker which tells travis to ensure that it's installed. The after_success part was not as straight forward but after a bit of googling it was quite simple in the end. We need ability to install the awscli so that we can login to the private repository and push the new image created by our travis build:

https://gist.github.com/dejanvasic85/ab3750084481990e415eb7d0a27f26f0
<blockquote>Hint: DO NOT ever commit your AWS keys especially in plaintext. Just use them as environment variables set in travis settings menu and mark them as secret which will not display their values during the build.</blockquote>
<h2>Terraform</h2>
This is one of the biggest changes for me when it comes to application deployment compared to using Octopus Deploy. Although, <a href="https://octopus.com/docs/deploying-applications/terraform-deployments">OD does support terraform deployment now</a>.

Terraform is a command line tool that also needs to be installed and available on your path. The change required for travis was to add a <code>before_deploy</code> because the service is not natively available like docker. This way, our terraform commands will be available in our travis script during the <code>deploy</code> step.

https://gist.github.com/dejanvasic85/0e3874c8ddcc1830eec6c991db5ba81d

Terraform is a simple infrastructure as a script so everything is described in a language called <code>HCL</code> which stands for HashiCorp Language (I think). But it's not very daunting to learn. In fact it's a really nice balance between a json file and a yml.

The following are the things I would like to share which I learned from using terraform which I didn't find documentation had really helped me with:
<h3>1. Please use a backend config stored in S3</h3>
What this means is that every time we execute terraform to <code>plan</code> or <code>apply</code> a deployment, it will store the state of the infrastructure as a file. But using a central storage like AWS S3, would mean that it can be executed all the time on any machine. You don't want be dependent on storage on a local machine somewhere.

Now, to configure your backend this is what worked for me (after many attempts). I finally got it working!

https://gist.github.com/dejanvasic85/f811e6f754c398f62cce94b96f0cb3d0

What I didn't like about this though, was that variable substitution doesn't work. So the region is actually hardcoded. This is one of the downsides I found in terraform. I still had to specify region a few times :(
<h3>2. Use environment variables for AWS authentication</h3>
Terraform documentation shows that you can specify AWS keys in your scripts. Don't do this unless you want to be hit by a massive bill because bots have obtained your keys and deployed a huge number of servers that are probably running bitcoin mining operations.

So, in my example I have a <code>deploy.sh</code> file which will execute terraform so that every time I execute it, I can set the keys in line during the execution like so:

<code>AWS_ACCESS_KEY_ID=xxx AWS_SECRET_ACCESS_KEY=xx ./deploy.sh</code>

When executing the deploy.sh file in travis, these keys should be available because I specified them and it works!
<h3>3. Separate your environments in to folders</h3>
One main difference to using Octopus Deploy, is that we can now configure all our environment variables in actual source controlled files. I like this. It gives the developers full control and history of changes as part of Git history.

However, it doesn't allow for "secrets" which makes things pretty tricky. There are solutions for this but I haven't had the chance to address it just yet.

So, terraform does a nice explanation of how variables and files work. It's pretty sweet. My deploy.sh file looks like this:

https://gist.github.com/dejanvasic85/999811e5a837fe2f70e8dcbd9ae0b72a

So you can see, that the build number is used for building the docker image and then it's used as a special variable passed through to the terraform command.

<code>-var app_version=$BUILD_NUMBER</code>

That is a nice way to propagate the build number through :)

Also. I like the use of the default bash script variables like the environment name which is then just used for string interpolation for the env file to use. Check out the <code>-var-file</code> parameter in the script above.
<h2>Final Touches</h2>
One thing I spent a lot of time on is ensuring that the <code>deploy</code> script worked in Travis. Thank you so much to the following blog post:

http://jongear.io/travis-script-deploy-gotcha/

So the special linux command <code>chmod +x ./filename.sh</code> before running the script does the trick to get rid of the travis permissions error. This helped me with my last section of the .travis.yml file:

https://gist.github.com/dejanvasic85/1b2243e6ee7d3d2a068c4e72f65941ef
<h2>Where is Fargate?</h2>
I didn't plan for this blog post to be so long... We'll leave it for next time. I quite like the idea of fargate. If EKS (kubernetes) on AWS was available, I'd probably use that instead because it seems to be making a lot more progress as it's opensource and now available on Azure and Google Cloud. However, neither Fargate nor EKS seem to be production ready. Therefore, if I was to push docker app to production on AWS, then I'd fall back to using ECS with managed EC2 instances.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>649</wp:post_id>
		<wp:post_date><![CDATA[2018-04-01 13:51:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-04-01 02:51:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-04-01 13:57:13]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-04-01 02:57:13]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[node-on-docker-using-aws-fargate]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
		<category domain="category" nicename="continuous-delivery"><![CDATA[Continuous Delivery]]></category>
		<category domain="post_tag" nicename="continuous-integration"><![CDATA[Continuous Integration]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="post_tag" nicename="expressjs"><![CDATA[expressjs]]></category>
		<category domain="post_tag" nicename="fargate"><![CDATA[fargate]]></category>
		<category domain="category" nicename="node"><![CDATA[Node]]></category>
		<category domain="post_tag" nicename="travis"><![CDATA[travis]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8b90345be4d378e607bb35f750816ceb]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_238e2b0cf04cd19eab585413572dd466]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e4d1410be1bfafed955a132c5317f5be]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:58:"https://twitter.com/dejanvasic85/status/980276584560111616";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_68f2a286312468b1d89443d719a6ede4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_16632ba11dcbf8d2590bd13f58afb5df]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[16337552586]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8ba749f2f70a75d077a20221c6b803d1]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1522551123]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6741d49b3bf72e07820b354b98cc05c7]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_google_plus_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://plus.google.com/+DejanVasic/posts/eNvvG1oEjn3]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_722ad21b5c236483ea413c8a2fe4f2fe]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734327]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_9777069]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_93780ec02e6e0959f4729907f9e65fe9]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_04ce6162e6a1d1a0f4863d986c87efed]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_817582b9f56c3c72587d09af31e406da]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a61647b69b9d62682252a599685da695]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_8d7e58e7e443672f714baf7964fb692a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_258cbe7345a2944aae6b02e8462f42ac]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9b40d698d9f36fa026ee7be5857961a7]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5baba70283b1a2912d63b1edd17a4e4e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5f3c90f8f94cba96a6ddfff24430b4c9]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_868cefadcebe1cf8640978317363aaae]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7c117f32a69ce7e967e5ccd67135e893]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_21e2df4b2bb0a8c953b31601a8ff9ea3]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_59d14d5b49b00ba80c92910151c13876]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9dd6e602642d852db616d953bcbae1f2]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_18a67b1e5e4f96bf3afe4a40cabd3c06]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_71fb8c0642bf2e3b0275645211dcf36f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_6eb6b56d0ba4ff7ca5729607b2c04632]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_aa0f567764f534112c9a40ea8028a1c4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a2516e1ebd088120cd61c55fadb5af2e]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d430edc2fdbbae0f6946c3049a702174]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[From .Net On-Premise to Node in the Cloud]]></title>
		<link>https://dejanvasic.wordpress.com/2018/01/03/from-net-on-premise-to-node-in-the-cloud/</link>
		<pubDate>Wed, 03 Jan 2018 03:58:38 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=650</guid>
		<description></description>
		<content:encoded><![CDATA[As a very long time .Net (mainly web) developer my main tooling consisted of ASP.Net MVC built using Visual Studio and a backend most likely a SQL server database. The front-end didn't matter so much as it was just served by IIS that was using the .Net Framework.

So what made me make take the plunge in to the JavaScript world and in to cloud provider hosting which are now part of my everyday job at MYOB? Quite simply, cloud hosting is trending for the bigger companies as it reduces costs greatly and it provides so much versatility and flexibility for different architectures. But why JavaScript and Node? I guess, Microsoft took the hit with DotNetCore and it's ability to run on the cheap Linux boxes which is still pre-mature in many respects. So my team selecting Node in mid-2016 before my arrival was an obvious choice.

My way of catching up and learning the best is to learn by doing my own side-project which I would build, test and deploy from scratch.

In my previous world I manage to achieve the following steps using TeamCity and Octopus Deploy:
<ol>
	<li>Build</li>
	<li>Unit Test</li>
	<li>Package Artifacts</li>
	<li>Deploy to CI Environment</li>
	<li>Run Automation Tests</li>
	<li>Deploy To Test Environment</li>
	<li>Deploy To Production Environment</li>
</ol>
Steps 6 and 7 were manual but could easily have been automatic triggers. The deployment steps also have ability to deploy a multi-tenanted application.
Steps 1 to 5 are performed on EVERY single branch. This is something that I slightly found to be a pain in the cloud hosting environment.

The cost saving part in the cloud definitely surrounds the production environment. However, to replicate all of this in different environments such as Dev, Test, Perf etc, I found that the cost could start rising quickly especially when automation and performance testing come in to play. That's why, one lesson learned recently is to practice destroying environments as soon as you are finished or at least on a nightly basis. In other words, treating environments as sheep.

Using IIS and SQL on a Windows Box single seemed much easier to setup and perform automation and integration testing. This saved my buttocks on many occasions and something we must do before deploying to production! So it will be very interesting to see how this goes for my new adventure.

As you can see, I am a true believer that continuous integration and delivery should be part of our developer DNA. In the next few months, my goal is to build a very small (let's call it a microservice) node application that can mimic the best practice development process all the way to production. And hopefully I can blog about each experience, particularly the ones I find painful.

The tools I will be using will be:
<ul>
	<li>Terraform</li>
	<li>AWS</li>
	<li>Docker</li>
	<li>Node Api using Express</li>
	<li>Database (most likely dynamo but still deciding)</li>
</ul>
My reasoning for most of the choices is simply to stay closer to my stack at my primary job so that I can grow to master some of them one day.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>650</wp:post_id>
		<wp:post_date><![CDATA[2018-01-03 14:58:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2018-01-03 03:58:38]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2018-01-03 15:00:11]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2018-01-03 04:00:11]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[from-net-on-premise-to-node-in-the-cloud]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="net"><![CDATA[.Net]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
		<category domain="post_tag" nicename="cloud-hosting"><![CDATA[cloud-hosting]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="post_tag" nicename="hosting"><![CDATA[Hosting]]></category>
		<category domain="post_tag" nicename="node"><![CDATA[Node]]></category>
		<category domain="category" nicename="software-development"><![CDATA[Software Development]]></category>
		<category domain="post_tag" nicename="terraform"><![CDATA[terraform]]></category>
		<category domain="post_tag" nicename="windows"><![CDATA[Windows]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_google_plus_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://plus.google.com/+DejanVasic/posts/Rgs1YcBboYR]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[13145321672]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:58:"https://twitter.com/dejanvasic85/status/948403224998039552";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734327]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_9777069]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Paging in Postgres and Java]]></title>
		<link>https://dejanvasic.wordpress.com/2019/01/03/paging-in-postgres-and-java/</link>
		<pubDate>Thu, 03 Jan 2019 06:17:52 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=659</guid>
		<description></description>
		<content:encoded><![CDATA[I am not a Postgres expert by any means. It has been a good 6 months of using what I think are the basics and so far one feature I found a breeze was server side paging.

It's one of those problems we always need to solve when it comes to scaling and performance on larger datasets but never without a challenge.

For particular reasons that don't need explaining here, I did not use an ORM in Java, so basic ResultSet was used to fetch and map the records out of the db.

So let's say we have a users table. The SQL for paging would look something like this to get the first 10 results (LIMIT 10) and page 1 (OFFSET 0)

[code language="java"]
SELECT *, count(*) OVER() AS full_count FROM (
select * from users ...
where ... -- include any filtering conditions here
) as t
LIMIT 10
OFFSET 0
[/code]

It's really as simple as this! The results would return the user records along with the last column called full_count.

:)

Now, reading that result set out in Java can be done pretty efficiently. Here's a generic method I am using to read out the data:

[code language="java"]
      private ResultSetWithCount executeQuery(String query) {
        final ResultSetWithCount result = new ResultSetWithCount(mMapper);
        Connection connection = getConnection();
        try (PreparedStatement prepared = connection.prepareStatement(query)) {
            ...
            ResultSet rs = prepared.executeQuery();
            result.map(rs); // Map the paged results here...
        } catch (SQLException exception) {
            handleSqlException(exception);
        }
        return result;
    }
[/code]

The method above is pretty simple. It accepts the raw SQL query (does not have to be prepared statement but that is a blog for another time), gets each record and lets the object ResultSetWithCount object do the mapping. The ResultSetWithCount class is the one with the trick to get the objects out as well as the total count column to be read only once.

This is what is looks like:

[code language="java"]
public class ResultSetWithCount {
    private long mTotalCount;
    private List mData;
    private final ResultSetMapper mMapper;

    public ResultSetWithCount(ResultSetMapper mapper) {
        mMapper = mapper;
        mData = new ArrayList();
    }

    public void map(ResultSet resultSet) throws SQLException {

        if (resultSet.next()) {
            mTotalCount = ResultSetHelper.tryReadLong(resultSet, JSONConstants.FULL_COUNT);
            mData.add(mMapper.mapFromResultSet(resultSet));
        }

        while (resultSet.next()) {
            mData.add(mMapper.mapFromResultSet(resultSet));
        }
    }

    public long getTotalCount() {
        return mTotalCount;
    }

    public List getData() {
        return mData;
    }
}
[/code]

So this class takes in an interface of ResultSetMapper. You must implement this interface which will understand how to map your ResultSet to a User object! It should take a ResultSet (SQL row) and map each property to the user property.

The nice and efficient part of this class is that it will read the first Result Set and map it to the Total Count property only once. The rest of the records will map to your User object.

Also, it keeps the paging aspect out of your domain model. So your user class doesn't need to have a "total count" property.

Once again, I'm sure there might be a nice and easier way to accomplish paging in Java and Postgres particularly using ORM tooling. Thought I'd share the approach we crafted ourselves.

Happy coding!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>659</wp:post_id>
		<wp:post_date><![CDATA[2019-01-03 17:17:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-01-03 06:17:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-01-13 08:40:44]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-01-12 21:40:44]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[paging-in-postgres-and-java]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="java"><![CDATA[Java]]></category>
		<category domain="post_tag" nicename="paging"><![CDATA[paging]]></category>
		<category domain="category" nicename="postgres"><![CDATA[Postgres]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1547267748]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_rest_api_client_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[26441814160]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1083945625501294592";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_google_plus_url]]></wp:meta_key>
		<wp:meta_value><![CDATA[https://plus.google.com/+DejanVasic/posts/JrZAVf2Lap5]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734327]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_9777069]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[GoLang api logging with correlation ID]]></title>
		<link>https://dejanvasic.wordpress.com/2019/11/01/golang-logging-with-correlation-id/</link>
		<pubDate>Fri, 01 Nov 2019 12:11:00 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=689</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The ability to correlate Logs during an API request can be of utter importance in large traffic applications. It provides easier diagnoses for issues and especially across applications (micro services) managed by different teams.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Generally the way we correlate requests is by using 'Correlation-ID' or 'X-Request-Id' or anything else that is a binding contract between teams and usually passed in by headers in the shape of a GUID.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are various parts of the application that make a lot of sense to have logs. That in itself is probably another topic. But a good pattern is to log in different layers of the application like a security later, request entry, validation, business operation and so on.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here we have a very simple API with an endpoint to fetch users and log some stuff along the way:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>package main

import (
	"encoding/json"
	"net/http"

	"github.com/gorilla/mux"
	log "github.com/sirupsen/logrus"
)

var users = map[string]string{
	"foo": "Mister Fooooo",
	"bar": "Missus Barrrr",
}

func HandleGetUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userID := params["id"]

	log.Infof("Fetching user %s", userID)

	if value, exists := users[userID]; exists {
		log.Infof("Found user %s", value)
		data := struct {
			Hello string
		}{
			Hello: value,
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(data)
		return
	}

	w.WriteHeader(http.StatusNotFound)
}

func main() {
	r := mux.NewRouter()

	r.HandleFunc("/users/{id}", HandleGetUser)

	log.Info("Starting server on port 9001")
	log.Fatal(http.ListenAndServe("localhost:9001", r), "Listening on port 9001")
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Once we call the users endpoints with "foo" we get this output:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>$ go run .
time="2019-11-01T21:52:49+11:00" level=info msg="Starting server on port 9001"
time="2019-11-01T21:53:48+11:00" level=info msg="Fetching user foo"
time="2019-11-01T21:53:48+11:00" level=info msg="Found user Mister Fooooo"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In this instance I'm using logrus for the logger but it can be easily replaced.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So this is all cool when the API is single<span style="color:var(--color-text);">&nbsp;threaded because the logs will be in sequential order and then we can see all the events and trace the sequence of actions in that request.</span></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In reality, however; our logs will probably look like this instead (regardless of language platform given the nature of Api's):</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>time="2019-11-01T21:53:48+11:00" level=info msg="Fetching user foo"
time="2019-11-01T21:53:48+11:00" level=info msg="Fetching user bar"
time="2019-11-01T21:53:48+11:00" level=info msg="Fetching user foo"
time="2019-11-01T21:53:48+11:00" level=info msg="Found user Mister Fooooo"
time="2019-11-01T21:53:48+11:00" level=info msg="Found user Mister Fooooo"
time="2019-11-01T21:53:48+11:00" level=info msg="Found user Mister bar"</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Logs are now all our of order. Many log aggregation tools like splunk or sumo allow us to search these entries but we need to identify them somehow. Enter Correlation ID. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At this point as a GoLang newbie, I was left scratching my head.  Usually, I would solve this problem in .Net using dependency injection to get the current Logger (per request) and using middleware to read the header and set the correlation ID for this logger. Then in all the other controllers and services that need to log anything, the correlation ID would be logged with it as an additional field.</p>
<!-- /wp:paragraph -->

<!-- wp:coblocks/click-to-tweet {"url":"https://dejanvasic.wordpress.com/2019/11/01/golang-logging-with-correlation-id/"} -->
<blockquote class="wp-block-coblocks-click-to-tweet"><p class="wp-block-coblocks-click-to-tweet__text">With Gorilla mux in golang, I haven't seen dependency injection or at least in the same way to resolve controllers and their dependencies. Wait, there ARE no controllers. </p><a class="wp-block-coblocks-click-to-tweet__twitter-btn" href="http://twitter.com/share?&amp;text=With%20Gorilla%20mux%20in%20golang%2C%20I%20haven't%20seen%20dependency%20injection%20or%20at%20least%20in%20the%20same%20way%20to%20resolve%20controllers%20and%20their%20dependencies.%20Wait%2C%20there%20ARE%20no%20controllers.%20&amp;url=https://dejanvasic.wordpress.com/2019/11/01/golang-logging-with-correlation-id/" target="_blank" rel="noopener noreferrer">Tweet</a></blockquote>
<!-- /wp:coblocks/click-to-tweet -->

<!-- wp:paragraph -->
<p>That's ok. We'll do with what we have. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li><a href="https://github.com/gorilla/mux#middleware">Middleware </a></li><li><a href="https://golang.org/pkg/context/">Golang Context</a>   </li><li><a href="https://github.com/sirupsen/logrus">Logrus </a>fields - yes it does use some nifty logrus features</li><li><s>Dependency Injection</s> - Might come back to this later. Haven't figured it out yet.</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>First, middleware will be executed before the handler to read the correlation ID and set it in to the context. Let's do that first. <em>Excuse the naughty magic strings everywhere.</em></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>func CorrelationMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		id := r.Header.Get("Correlation-ID")
		ctx := context.WithValue(r.Context(), "CorrelationID", id)
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And make sure to add it to the main function:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>func main() {
	r := mux.NewRouter()

	r.Use(CorrelationMiddleware)
	r.HandleFunc("/users/{id}", HandleGetUser)

	log.Info("Starting server on port 9001")
	log.Fatal(http.ListenAndServe("localhost:9001", r), "Listening on port 9001")
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>At this point, we the correlation ID ready in the context for subsequent handlers / middleware. So we could easily read it out every time we need to log and append it at the start or end of our logs. But we can do one better than that. Logrus logger has a nice <code>WithFields</code> method that creates an entry. This instance can be stored on the context as well or even just replace the correlation ID entry. So it becomes like this:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>func CorrelationMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		id := r.Header.Get("Correlation-ID")
		entry := log.WithFields(log.Fields{
			"correlationID": id,
		})
		ctx := context.WithValue(r.Context(), "RequestLogger", entry)
		next.ServeHTTP(w, r.WithContext(ctx))
	})
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So in our handlers we can now fetch the <code>RequestLogger</code> from our context instead of calling <code>Log</code> directly. Our handler is updated to look like this:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>func HandleGetUser(w http.ResponseWriter, r *http.Request) {
	logger := r.Context().Value("RequestLogger").(*log.Entry)
	params := mux.Vars(r)
	userID := params["id"]

	logger.Infof("Fetching user %s", userID)

	if value, exists := users[userID]; exists {
		logger.Infof("Found user %s", value)
		data := struct {
			Hello string
		}{
			Hello: value,
		}

		w.Header().Set("Content-Type", "application/json")
		json.NewEncoder(w).Encode(data)
		return
	}

	w.WriteHeader(http.StatusNotFound)
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>And the output? </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>time="2019-11-01T22:57:51+11:00" level=info msg="Fetching user foo" correlationID=111
time="2019-11-01T22:57:54+11:00" level=info msg="Fetching user foo" correlationID=222
time="2019-11-01T22:57:54+11:00" level=info msg="Found user Mister Fooooo" correlationID=222
time="2019-11-01T22:57:51+11:00" level=info msg="Found user Mister Fooooo" correlationID=111</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Whenever we fetch the logger from the context we will have any fields associated to the logger up to that point. We could also add things like App Version, App Name, request method, endpoint name etc etc. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://github.com/sirupsen/logrus">Logrus </a>is the only library I have explored in my miniscule time looking at golang but it does have support for JSON logs along with many other features.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>One thing I would like to explore next is the possibility of using dependency injection to resolve a logger instead of fetching from the context on every handler entry. This would also help a lot if another dependency in the request call stack needs to log something. It would save us from passing it as an argument. Hope this all makes sense. I definitely learned something from it.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>689</wp:post_id>
		<wp:post_date><![CDATA[2019-11-01 23:11:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-01 12:11:00]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-11-07 09:30:12]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-11-06 22:30:12]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[golang-logging-with-correlation-id]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="bestpractices"><![CDATA[BestPractices]]></category>
		<category domain="post_tag" nicename="correlationid"><![CDATA[CorrelationID]]></category>
		<category domain="category" nicename="golang"><![CDATA[Golang]]></category>
		<category domain="post_tag" nicename="logging"><![CDATA[Logging]]></category>
		<category domain="post_tag" nicename="microservicea"><![CDATA[Microservicea]]></category>
		<category domain="post_tag" nicename="requestid"><![CDATA[RequestID]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[amp_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[advanced_seo_description]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1572610263]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[36967458097]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_attr]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_dimensions]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_responsive_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_accordion_ie_support]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1190239833228218368";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[spay_email]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>789</wp:comment_id>
			<wp:comment_author><![CDATA[Avinandan Ganguly]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[avi.ganguly94@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[182.66.32.222]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-01-14 15:20:48]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-01-14 04:20:48]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, What if multiple requests are flowing in at the same time, will the correlation id not be overwritten ambiguously?]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1646035130.211969;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"dejanvasic";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1646035129]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1646035129]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642138332.666924;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1642134050.039214;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					<wp:comment>
			<wp:comment_id>799</wp:comment_id>
			<wp:comment_author><![CDATA[Dejan]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[dejanvasic24@gmail.com]]></wp:comment_author_email>
			<wp:comment_author_url>http://dejanvasic.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[134.238.237.126]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2022-02-28 19:00:54]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2022-02-28 08:00:54]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The correlation ID is stored in the context per request:

```
ctx := context.WithValue(r.Context(), "CorrelationID", id)
```]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[comment]]></wp:comment_type>
			<wp:comment_parent>789</wp:comment_parent>
			<wp:comment_user_id>18231012</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1646035254]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1646035255.380525;s:5:"event";s:9:"check-ham";s:4:"user";s:10:"dejanvasic";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_notqueued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1646035255]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Managing Postgres database locally with Docker]]></title>
		<link>https://dejanvasic.wordpress.com/2019/11/07/managing-postgres-database-locally-with-docker/</link>
		<pubDate>Wed, 06 Nov 2019 22:41:34 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=718</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Gone are the days when I'd install a database engine on my local machine to do some development. Whenever doing any database development, we should be in a position to have migration scripts as well as data seeding. Being able to teardown and spin up a database is good to practice often on any environment including local. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Welcome docker.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The following docker command is pretty neat because it will create everything you need to get Postgres running on your development machine.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>docker run -e POSTGRES_USER=&lt;dbuser&gt; -e POSTGRES_PASSWORD=&lt;dbpassword&gt; -e POSTGRES_DB=&lt;dbname&gt; -p 5432:5432 --name &lt;dbname&gt; -d postgres
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>What's cool about the <a href="https://hub.docker.com/_/postgres">Postgres image</a> is that it already has a <a href="https://docs.docker.com/storage/volumes/">volume</a> configured which means that even if you turn off your machine, the data will be retained. Next time you start docker, it's all there.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>718</wp:post_id>
		<wp:post_date><![CDATA[2019-11-07 09:41:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2019-11-06 22:41:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2019-11-08 08:19:45]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2019-11-07 21:19:45]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[managing-postgres-database-locally-with-docker]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="docker"><![CDATA[docker]]></category>
		<category domain="post_tag" nicename="postgres"><![CDATA[Postgres]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[719]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1192210476136124416";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1573080098]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[37155605331]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Unit of work with node mssql and typescript]]></title>
		<link>https://dejanvasic.wordpress.com/2020/01/03/unit-of-work-with-node-mssql-and-typescript/</link>
		<pubDate>Fri, 03 Jan 2020 10:37:12 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=728</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently I had the opportunity to rewrite a microservice responsible for writing records to two different databases in a single atomic transaction. The service is written in Typescript and deployed in a lambda using the <a href="http://serverless.com">serverless framework</a>.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>With my old .Net hat back, transactions were easily achieved with a transaction scope or the Entity Framework's Db Context. Yes, there were still some patterns required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Coming across the <a href="https://www.npmjs.com/package/mssql">mssql</a> node package, it seemed to do the trick for all the simple SQL statements. This code would live in a repository that exposes a few create methods. So let's say we have this in some business processing layer where two records need to be inserted but should be accomplished with a single database transaction:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import repository from './repository';

export const addUser = async (name, email, password) =&gt; {
  await repository.createProfile(name, email);
  await repository.createLogin(email, password);
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>If the <code>createLogin</code> method fails, then the <code>createProfile</code> method should roll back successfully.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Given a simple unit of work pattern, I wanted to simply surround these two methods so it looks like the following:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>  const unitOfWork = withUnitOfWork(repository);
  await repository.createProfile(name, email);
  await repository.createLogin(email, password);
  await unitOfWork.commit();</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>That type of syntax would be ideal because it is testable in my opinion. What if multiple repositories needed to be called like this?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import userRepository from './userRepository';
import authRepository from './authRepository';
import withUnitOfWork from './unitOfWork';

export const addUser = async (name, email, password) =&gt; {
  const unitOfWork = withUnitOfWork(userRepository, authRepository);
  await userRepository.createProfile(name, email);
  await authRepository.createLogin(email, password);
  unitOfWork.commit();
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Yes, that would also be a valuable requirement here. Generally a business method would span multiple repositories. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Firstly, using typescript each repository needs to have a <code>beginTransaction</code> method.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>export interface Repository {
  beginTransaction: () =&gt; Promise&lt;Transaction&gt;;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Then, the unit of work should be as simple as:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { Repository, UnitOfWork } from './types';
import { Transaction } from 'mssql';
import logger from './logger';

const withUnitOfWork = async (...repositories: Repository&#091;]): Promise&lt;UnitOfWork&gt; =&gt; {
  const transactions: Transaction&#091;] = await Promise.all(repositories.map(async r =&gt; await r.beginTransaction()));

  return {
    commit: async (): Promise&lt;void&gt; =&gt; {
      try {
        logger.info(`Commiting transactions &#091;${transactions.length}]`);
        for (const { commit } of transactions) {
          await commit();
        }
      } catch (err) {
        logger.error(`An error occurred in SQL Transaction`, err);
        for (const { rollback } of transactions) {
          rollback();
        }
      }
    }
  };
};

export default withUnitOfWork;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So what's happening here is very simple. Each repository has a beginTransaction method which will connect to the required database and start a transaction then return it to the unit of work. On commit, each transaction's <code>commit</code> is called.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Should there be any errors thrown, all the transactions will be rolled back.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy coding</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>728</wp:post_id>
		<wp:post_date><![CDATA[2020-01-03 21:37:12]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-03 10:37:12]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-06 08:01:37]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-05 21:01:37]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[unit-of-work-with-node-mssql-and-typescript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="lambda"><![CDATA[lambda]]></category>
		<category domain="post_tag" nicename="node"><![CDATA[Node]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[typescript]]></category>
		<category domain="post_tag" nicename="unitofwork"><![CDATA[unitofwork]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1578221900]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[39193267868]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1213776744190226433";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[735]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[YNAB You really do need a budget]]></title>
		<link>https://dejanvasic.wordpress.com/2020/01/15/ynab-you-really-do-need-a-budget/</link>
		<pubDate>Wed, 15 Jan 2020 05:23:10 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=740</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p><a href="https://www.youneedabudget.com/">YNAB</a> is a budgeting app on mobile and web and it has proved to be invaluable for me personally. Majority of people squirm at the thought of creating and maintaining a personal budget because it has a reputation of restricting freedom to spend on things they enjoy like retail, entertainment or holidays. These feelings are definitely not foreign to many. However YNAB came along and provided  other views on budgeting I would like to share here.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Predictability and confidence</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Monthly salaries can be tricky for most people as they would just start spending as soon as the money lands. Weekly could be the case if you're even more careless! It starts with buying that thing you couldn't last month because you ran out of cash. You you pay those little debts to you or someone else. Next few weeks you indulge in things you cannot usually. By the end of month it's out of pocket and having to say no or borrowing money. This process is repeated... </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Implementing a budget solves this problem by providing awareness. This is actually quite powerful because in turns it generates confidence to say yes or no to things. There are necessities we must pay like mortgage and bills. They come first. Then it's hobbies and lifestyle choices. In YNAB, each one is simply an account which can accumulate over months. During a month, if one one these accounts goes in to negative, then you need to dig in to another lifestyle category to cover the overspending. Simple... Well maybe not at the beginning, but the concept is simple. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Breaking out of the loop</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Many budgeting systems including YNAB focus on a monthly basis and the first time setting up the budget for a month you'll find that there isn't enough money to cover all your expenses. And the salary that may or may not come that month is not considered yet because you just don't have it yet. Makes sense. Right? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So the logical goal is to one day, have enough money at the start of the month to ensure you have enough for your expenditure especially the necessities. And you should not have to rely on the coming pay, because that's the pool of money for next month. This is a great achievement when accomplished. With a bit of discipline it can be done! </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My friend, for example found this to be a daunting task since they were only able to budget their current pool of money for about two weeks before relying on potential income. About 6 months later, they smashed this cycle. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong><a href="https://barefootinvestor.com/blog/">Barefoot</a>, you don't need multiple bank accounts</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The concept I love about YNAB is that every category is a virtual account. The barefoot investor has strategies where physical bank accounts are required and are very rigid if following his guidelines. But that seems like a lot of wasted effort when it comes to YNAB. There may be just one actual bank account which inherits the "To be budgeted" category. It's a pool of money you can assign/move to other categories. So at the start of each month you make the decision where that pool of money will go. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Honesty is the best policy</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is all worthless if you cannot track your actual expenditure. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>And if you start tracking, the number one rule is to be honest. No bullshit about money coming in or going out. Including cash. So when adding accounts you have to add everything including "cash" as an account or credit card. So be sure to include everything including transferring between accounts like mortgages and even buying 3 dollar lattes with your coins. Especially credit card spending. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Credit cards are yours! The moment you tap or swipe or buy online with you credit card, that payment is recorded as it happened this month! It's part of your current expenses, not when you have to "pay back".  Unlike <a href="https://barefootinvestor.com/blog/">Barefoot Investor</a>, I don't believe credit cards are a problem if you adopt the this mentality. Otherwise, cut them immediately.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>Tracking money is a legit problem</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ok, so it's 2020 and unfortunately our banks who hold the transaction data gold mine are dinasours. The big four banks (<a href="https://www.commbank.com.au/">Commonwealth Bank</a>, <a href="https://www.westpac.com.au/">Westpac</a>, <a href="https://www.nab.com.au/">NAB </a>and <a href="https://www.anz.com.au/">ANZ</a>) are all at least 10 years behind in modern technology. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>YNAB cannot take the blame for lack of automatic integration because Aussie banks don't provide such a feature. There is no API, even if you own the data. So there are two options. </p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><li>Manually record every transaction. I used to do this every night before bed, or even in the moment I spend it.<br></li><li>Figure out how to automate incoming transactions and automatically record / assign them in YNAB.</li></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>Option 1 is prone to human error. It ends up with YNAB accounts not matching the real bank account which then forces us to either create a dummy transaction balance out (my preference) or clicking reconcile in the app which does something funny and hides old transactions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This is the biggest downside to budgeting with real transactions especially in non-American countries. Personally, I believe the YNAB and other budgeting apps should be a lot cheaper for manual entry. It makes absolutely no sense to charge at the same rate for automated and manual recording. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Option 2 is definitely within reach if you're a software developer because YNAB does provide an <a href="https://api.youneedabudget.com/v1#/">API </a>to fetch and update almost all budget data.  In my next post I will explain the strategy and technology used to achieve this automation and even open sourced it.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Having said all that, budgeting in general is still worth the effort with or without YNAB. But the has app has definitely changed my mind about the whole concept.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>740</wp:post_id>
		<wp:post_date><![CDATA[2020-01-15 16:23:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-01-15 05:23:10]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-01-27 11:39:41]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-01-27 00:39:41]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[closed]]></wp:comment_status>
		<wp:ping_status><![CDATA[closed]]></wp:ping_status>
		<wp:post_name><![CDATA[ynab-you-really-do-need-a-budget]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="api"><![CDATA[API]]></category>
		<category domain="post_tag" nicename="banks"><![CDATA[Banks]]></category>
		<category domain="post_tag" nicename="budgeting"><![CDATA[Budgeting]]></category>
		<category domain="category" nicename="finance"><![CDATA[Finance]]></category>
		<category domain="post_tag" nicename="software"><![CDATA[software]]></category>
		<category domain="post_tag" nicename="ynab"><![CDATA[YNAB]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
		<wp:meta_value><![CDATA[18231012]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[amp_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_accordion_ie_support]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[39987980958]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1580083992]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[748]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_attr]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_dimensions]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_responsive_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1221586927759036417";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[advanced_seo_description]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[spay_email]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a907e0b635790d669074f81e47772522]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_dd621ac248ea536dcd71c9d1ce25b6b0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_3e2a969a27b381532bd1a498dd6fefb4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[React Typescript and Ant Design]]></title>
		<link>https://dejanvasic.wordpress.com/2020/06/05/react-typescript-and-ant-design/</link>
		<pubDate>Fri, 05 Jun 2020 08:18:25 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=757</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Yet another React boilerplate (GitHub template) project!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Skip and show me the code: <a href="https://github.com/dejanvasic85/react-ts-ant">https://github.com/dejanvasic85/react-ts-ant</a></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Purpose:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To have a "leaner" react solution ready to go when I'd like to build something from scratch. The amount of dependencies and tools that we require on the front-end these days is astonishing. If you like to calculate the permutations, be my guest but here are the choices I've made for starting a new Single Page Application in React:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Language: Typescript</li><li>Freshness: <a href="https://github.com/renovatebot/renovate">Renovate</a></li><li>CSS Modules with <a href="https://ant.design/">Ant Design</a></li><li>Bundler: <a href="https://webpack.js.org/">Webpack</a></li><li>Unit Testing: <a href="https://jestjs.io/">Jest</a> and <a href="https://enzymejs.github.io/enzyme/">Enzyme</a> (no snapshots but thanks)</li><li>Build: Circle CI (coming soon)</li><li>Cypress end 2 end testing (coming soon)</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>After having a bad experience with some package dependencies, I came to the conclusion that I need to move away from Create React App. As a react newbie, I keep trying with CRA, but something always seems to be getting in the way.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Ant Design and Theme</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Ant Design is a pretty damn sweet React framework so this is something I wanted to start using. It's always the lazy option to use the basic theme so why not instead make use of the <em><a href="https://ant.design/docs/react/customize-theme">theming options</a></em> that are already available?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My goal is to have a single <code>theme</code>.less file which overrides the default Ant variables. To achieve it, we'll have to do a bit of work by making use of webpack css loaders. Assuming you have knowledge of what they are!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When dissecting this file: https://github.com/dejanvasic85/react-ts-ant/blob/master/webpack/loaders.js</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>We can see the Ant Style loaders need to happen first. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code> {
    test: /antd.*\.less$/,
    loader: isDevEnvironment ? &#091;'style-loader', ...antStyleLoaders] : &#091;MiniCssExtractPlugin.loader, ...antStyleLoaders],
  },
  {
    test: /\.less?$/,
    exclude: excludedFolders,
    loader: isDevEnvironment ? &#091;'style-loader', ...cssStyleLoaders] : &#091;MiniCssExtractPlugin.loader, ...cssStyleLoaders],
  },</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The ant style loaders are defined here (cssLoaders.js):</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>variables
module.exports.antStyleLoaders = &#091;
  {
    loader: 'css-loader',
  },
  postCssLoader,
  {
    loader: 'less-loader',
    options: {
      lessOptions: {
        javascriptEnabled: true,
        modifyVars,
      },
    },
  },
];</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The <code>javascriptEnabled</code> must be true for . And notice the <code>modifyVars</code>? That's where the magic happens for the theme to take effect.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's have a look at the declarations at the top of that file.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>const fs = require('fs');
const lessToJs = require('less-vars-to-js');

const { localIdentName, rootPath } = require('./env');
const themeFile = fs.readFileSync(`${rootPath}/src/styles/theme.less`, 'utf-8');
const modifyVars = lessToJs(themeFile, { resolveVariables: true, stripPrefix: true });</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There is a convenient package <code>less-vars-to-js</code> which allows us to use the <code>theme.less</code> (which is what I wanted) to declare all variables that will then be converted to a JSON object which in turn is used for the ant 'less-loader' in the previous code snippet.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>At the moment <code>theme.less</code> file only contains a single variable to prove that it's working:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// Colour Palette
@primary-color: #4953fb;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is converted to <code>primaryColor</code> when lessToJs does its work. There is however a huge amount of variables you can override from this <a href="https://github.com/ant-design/ant-design/blob/master/components/style/themes/default.less">list found here</a>. And that's it! Now we can import styles and reference classes in our React components like this:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import styles from './App.less';

const { Header, Content } = Layout;

const App = () =&gt; {
  return (
    &lt;Layout&gt;
      &lt;Header className={styles.heading}&gt;To Do&lt;/Header&gt;
      &lt;Content&gt;
        &lt;div className={styles.container}&gt;
          &lt;div className={styles.content}&gt;
            &lt;Typography.Title level={4}&gt;What is on for today?&lt;/Typography.Title&gt;
            &lt;TodoList /&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/Content&gt;
    &lt;/Layout&gt;
  );
};</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Keeping everything up to date</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Renovate is a tool I could not recommend enough to ensure that our dependencies are kept up to date with automatic Pull Requests. Given this is a small starter project, it can be used to test some of these major releases and breakages that may happen for other larger projects. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Testing </h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Enzyme and Jest seem to be the natural choices for React these days but some examples can be a little tricky and hard to remember. This is why it's nice to have a full CRUD such as a To Do example in this solution. Saves me from hunting down some examples on using these tools.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>757</wp:post_id>
		<wp:post_date><![CDATA[2020-06-05 19:18:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-05 08:18:25]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-05 19:26:19]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-05 08:26:19]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[react-typescript-and-ant-design]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="ant-design"><![CDATA[ant-design]]></category>
		<category domain="post_tag" nicename="antdesign"><![CDATA[antdesign]]></category>
		<category domain="post_tag" nicename="boilerplate"><![CDATA[boilerplate]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
		<category domain="post_tag" nicename="template"><![CDATA[template]]></category>
		<category domain="post_tag" nicename="theming"><![CDATA[theming]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[typescript]]></category>
		<category domain="post_tag" nicename="webpack"><![CDATA[webpack]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[45099094749]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[807]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1591345108]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1268819465644519425";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_attr]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_dimensions]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_responsive_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_accordion_ie_support]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[advanced_seo_description]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[amp_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[spay_email]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Sequelize 5 with Typescript]]></title>
		<link>https://dejanvasic.wordpress.com/2020/04/05/sequelize-5-with-typescript/</link>
		<pubDate>Sun, 05 Apr 2020 10:43:42 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=766</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>In the past I have used the pretty awesome <a href="https://sequelize.org/">Sequelize </a>library for connecting to Postgres which allows really nifty query methods as well as database migrations and seeding. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Doing it in Javascript is quite straight forward and their documentation is thorough enough to get up and running. However, Typescript is a lot to be desired and the articles I found online reference an older version of the library (v4). The current version I'm looking at the moment is 5.21.5. From my understanding, the types have been migrated to be part of v5, so types @types/sequelize package  should be avoided. The latest version should contain all the type definitions. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3>Creating models</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This would be a typical way of creating a new model in version 5.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { Model, BuildOptions, Sequelize, DataTypes } from 'sequelize';

export interface UserAttributes extends Model {
  id?: number;
  email: string;
  firstName: string;
  lastName: string;
  createdAt?: string;
  updatedAt?: string;
}

type UserModel = typeof Model &amp; {
  new (values?: object, options?: BuildOptions): UserAttributes;
};

export function initUser(seq: Sequelize): UserModel {
  return &lt;UserModel&gt;seq.define('Users', {
    id: {
      type: DataTypes.NUMBER,
      primaryKey: true,
    },
    email: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    firstName: {
      type: DataTypes.STRING,
    },
    lastName: {
      type: DataTypes.STRING,
    },
    phone: {
      type: DataTypes.STRING,
    },
  });
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The next step is to expose models in an index.ts file. Connection string should come from an environment variable (loaded maybe through a secret). </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import Sequelize from 'sequelize';
import { initUser } from './user';

const sequelize = new Sequelize.Sequelize('connectionStringGoesHere', { dialect: 'postgres' });

const db = {
  sequelize,
  Users: initUser(sequelize),
};

Object.values(db).forEach((model: any) =&gt; {
  if (model.associate) {
    model.associate(db);
  }
});

export default db;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>In my Koa application (which is very similar to express), I first ensure that my application can connect to the database. Which then can proceed to fetch users.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import Koa from 'Koa';

import db from './models';

const koa = new Koa();

const start = async () =&gt; {
  await db.authenticate();

  // Do this in a route
  const users = await Users.findAll();
  console.log('Got users ', users);

  koa.listen(3000);
}

start();</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>Migrations</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Migrations can be used as normal and they don't require Typescript. So a root folder can be used with a name like 'db'. Which can then be ignored by Typescript tsconfig.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>{
  "compilerOptions": {
    ...
  },
  "exclude": &#091;
     ...
    "./db"
  ]
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The root of the application still requires a .sequelizerc file with the following contents:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>const path = require('path');

module.exports = {
  'config': path.resolve('db', 'dbconfig.js'),
  'migrations-path': path.resolve('db', 'migrations')
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>One more config remaining and that is the dbconfig.js file. I prefer to have this as Javascript than plain json file. Reason being, is to load environment variables before running migrations like so:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// This configuration is for sequelize migrations only

const dotenv = require('dotenv');
dotenv.config();

const { DATABASE_URL, DB_SSL } = process.env;

console.log('Migrations are loading dbconfig', {
  DATABASE_URL,
  DB_SSL,
});

module.exports = {
  production: {
    use_env_variable: 'DATABASE_URL',
    dialect: 'postgres',
    dialectOptions: {
      ssl: DB_SSL === 'true',
    },
  },
};
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>There's no real need to have multiple environments in this file in my opinion given that the variables should be loaded from the environment anyway. The database url and SSL is really all you need unless something more complicated is required.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The sequelize-cli can then be used as normal to generate and run migrations as per documentation. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>sequelize migration:generate --name create-users
sequelize db:migrate --env production</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3>References</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>https://michalzalecki.com/using-sequelize-with-typescript/</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://sequelize.org/master/manual/migrations.html</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>https://github.com/sequelize/sequelize/issues/11215#issuecomment-570358552</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>766</wp:post_id>
		<wp:post_date><![CDATA[2020-04-05 21:43:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-04-05 10:43:42]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-04-07 09:29:29]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-04-06 22:29:29]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sequelize-5-with-typescript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="javascript"><![CDATA[JavaScript]]></category>
		<category domain="post_tag" nicename="postgres"><![CDATA[Postgres]]></category>
		<category domain="post_tag" nicename="sequelize"><![CDATA[Sequelize]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[typescript]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5b8157f615876c8bd5601a4469d1a56a]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_e6600efbdb15c345f34585d9cd985f0f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9ce1d0e9ca1eef9a1cf813152f2ef7ad]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a907e0b635790d669074f81e47772522]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_dd621ac248ea536dcd71c9d1ce25b6b0]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_3e2a969a27b381532bd1a498dd6fefb4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0319dc57fc9b3dd4b0d02af5a504765d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_3e133c83fc9e3fc3acb89a734444840f]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[42650145993]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1586083426]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_a9f1ef1b95b57956df071febc6c96258]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1246750371269279745";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_c54a9afe8a171b83ec4f627d1c995ae7]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_2a342ae248c4df6aa5a51a10495eac88]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_d35ab5d95c42e2a3be8abdda04eab8dc]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[778]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5e48c0f882cfd3003bed3b2d5cb20d32]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_9050323b22b65fd5393e2d32b8412435]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_7fee04638c4fd6cfb725a81d0a168f18]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5e383fb98a4ae6a1bd255aa42ff4d765]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_164dd3600d9f720a8dde20b3e6b9d76b]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_40415988b11b88ab423eb7df34097dc8]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_970b18cb9c63e026124b28cfade1da6d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_fb3a374cf0f47ff03cdb51b3cc3bd36d]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_0caeccc502edfe4429bbd1a3be457c64]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_78042d14f1431aacd9da78ad18a863d4]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_63a9f86225f1fe14fa36c44c8a32b8cc]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_86a60fd4c39e7c34a4ee6cf69c9cc541]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_116e3e22536ff8bd4e110791879b3ecf]]></wp:meta_key>
		<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[CircleCi and Heroku Orb]]></title>
		<link>https://dejanvasic.wordpress.com/2020/06/23/circleci-and-heroku-orb/</link>
		<pubDate>Tue, 23 Jun 2020 03:10:52 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=812</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently I've had some pain trying to use the <a href="https://circleci.com/orbs/registry/orb/circleci/heroku#quick-start">Heroku Orb</a> in Circle CI config.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>My goal was simple. <strong>Send the build number from Circle CI as part of the heroku deployment. </strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There are two ways to use this orb: </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><li>Commands</li><li>Jobs</li></ul>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The problem I was facing was that I had my blinkers on the Jobs and originally the config.yml looked like this:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>version: 2.1
orbs:
  node: circleci/node@2.1.1
  heroku: circleci/heroku@1.0.1

workflows:
  build-test-deploy:
    jobs:
      - node/test
      - heroku/deploy-via-git:
          app-name: application-name
          requires:
            - node/test
          filters:
            branches:
              only: master
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This is very simple right? However, where is the build number? How do we set that environment variable in Heroku so that the application can load it at runtime?</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":813,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2020/06/image.png?w=1024" alt="" class="wp-image-813" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To set the environment variable, we'd need access to the heroku command line and call `heroku config:set ...`.  Then, I came across the pre-deploy step/hook for that job and that seemed to work!</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>...

workflows:
  build-test-deploy:
    jobs:
      - node/test
      - heroku/deploy-via-git:
          app-name: application-name
          pre-deploy:
            - run: heroku config:set BUILD_NUMBER=$CIRCLE_BUILD_NUM -a application-name
....</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Nice :) But then I came across this error on the subsequent builds :(</p>
<!-- /wp:paragraph -->

<!-- wp:preformatted -->
<pre class="wp-block-preformatted">#!/bin/bash -eo pipefail
if false;then
  force="-f"
fi
git push $force https://heroku:$HEROKU_API_KEY@git.heroku.com/xxxxx.git $CIRCLE_BRANCH:master
To https://git.heroku.com/************.git
 ! [rejected]        master -&gt; master (fetch first)
error: failed to push some refs to 'https://heroku:************************************@git.heroku.com/************.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</pre>
<!-- /wp:preformatted -->

<!-- wp:heading -->
<h2>The Fix!</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The above error was happening probably because the container had cached git files and needed to do a force push. i.e. `git push -f ....` which happens inside this job. But guess what? The job didn't have that parameter available so we have to use the heroku commands instead!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The final working outcome is this (notice the `force:true`):</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>version: 2.1
orbs:
  node: circleci/node@2.1.1
  heroku: circleci/heroku@1.0.1

jobs:
  deploy:
    executor: heroku/default
    steps:
      - checkout
      - heroku/install
      - run: heroku config:set BUILD_NUMBER=$CIRCLE_BUILD_NUM -a application-name
      - heroku/deploy-via-git:
          app-name: application-name
          force: true
        
workflows:
  build-test-deploy:
    jobs:
      - node/test
      - deploy:
          requires:
            - node/test
          filters:
            branches:
              only: master
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>812</wp:post_id>
		<wp:post_date><![CDATA[2020-06-23 14:10:52]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-06-23 03:10:52]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-06-23 14:10:52]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-06-23 03:10:52]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[circleci-and-heroku-orb]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="buildnumber"><![CDATA[buildnumber]]></category>
		<category domain="post_tag" nicename="circleci"><![CDATA[circleci]]></category>
		<category domain="category" nicename="continuous-delivery"><![CDATA[Continuous Delivery]]></category>
		<category domain="post_tag" nicename="heroku"><![CDATA[heroku]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[815]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[45752344884]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1592881857]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Serving React SPA in Koa]]></title>
		<link>https://dejanvasic.wordpress.com/2020/08/22/serving-react-spa-in-koa/</link>
		<pubDate>Sat, 22 Aug 2020 07:54:34 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=821</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Today was the second time I spent a little bit of time trying to configure a <a href="https://koajs.com/">Koa</a> application with a GraphQL API endpoint as well static websites including a landing page and a React Single Page application.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The landing page is simple because it's only a single index.html page with some assets. Nothing complicated and is served on the root path. The React application on the other hand needs to handle its own routing so when hitting the Koa server route such as <code>/app/profile</code> the React application should be served.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For  structure of the directories in the application is as follows:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>api/
  app.ts
client/
  public/
    index.html
  package.json
landing-page/
  index.html
package.json</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":5} -->
<h5>The Solution</h5>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Going in to the app.ts file, this was my end result:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import Koa from 'koa';
import mount from 'koa-mount';
import serve from 'koa-static';

const staticLanding = new Koa();
staticClient.use(serve(`${__dirname}/../landing-page`));

const SPA_PATH = `${__dirname}/../client/public`
const staticSpa = new Koa();
staticSpa.use(serve(SPA_PATH));

const staticSpaMiddleware = async (ctx, next) =&gt; {
  return await serve(SPA_PATH)(Object.assign(ctx, { path: 'index.html' }), next);
};

// API Routes
app.use(mount('/api/health', health(config)));
app.use(mount('/api/graphql', graphQL));

// React application served only on /app route
app.use(mount('/app', staticSpa));

// Landing page
app.use(mount('/', staticLanding));

// Catch all route will also go to react /app
app.use(staticSpaMiddleware);
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Comments :point_up describe the order of the route definitions.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But why is the react app served on multiple routes instead of a wildcard? I vaguely remember in Express, to be a simple `/app/*` and something I'd prefer. Many attempts were to use the wildcard which requires a generator function as a handler:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">/app/(*/)</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>But I find this very confusing and still haven't got my head around generators just yet. Instead I find that having a catch all route to simply always go to the React application. It's just simple and neat. </p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>821</wp:post_id>
		<wp:post_date><![CDATA[2020-08-22 18:54:34]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-08-22 07:54:34]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-08-22 18:54:34]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-08-22 07:54:34]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[serving-react-spa-in-koa]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1598082877]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[47990393165]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[827]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Ant Design Upload to S3 Bucket and GraphQL]]></title>
		<link>https://dejanvasic.wordpress.com/2020/09/10/ant-design-upload-to-s3-bucket-and-graphql/</link>
		<pubDate>Wed, 09 Sep 2020 14:52:55 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=829</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Ant Design's Upload component is packed full of features. When it comes to uploading to an AWS S3 bucket using a signed request, there's obvious lack of documentation on how to achieve this.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's definitely a few approaches available but I found the easiest route is to use the Signed Request URL form S3.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The flow:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":835,"sizeSlug":"large"} -->
<figure class="wp-block-image size-large"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2020/09/image.png?w=422" alt="" class="wp-image-835" /></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>First we need to get a signed URL for the action from the S3 bucket, then upload the file to that endpoint. Once completed, we should update the affected record in the API / database.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Here's the final component with explanatory comments on how it all hangs together. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import React, { useState } from 'react';
import { useMutation } from '@apollo/client';
import { Upload, message, notification } from 'antd';
import ImgCrop from 'antd-img-crop';

import { UPLOAD_FILE } from './ProfilePic.graphql';
import { Props, Request, Response } from './ProfilePic.types';

const ProfilePic = ({ id, currentImgUrl, updatePicture }: Props) =&gt; {
  const initialState = currentImgUrl
    ? &#091;
        {
          uid: 'current',
          status: 'done',
          url: currentImgUrl,
        },
      ]
    : &#091;];

  const &#091;uploadFile, { data: uploadFileData }] = useMutation&lt;Response, Request&gt;(UPLOAD_FILE);
  const &#091;fileList, setFileList] = useState&lt;any&#091;]&gt;(initialState);
  const &#091;headers, setHeaders] = useState&lt;any&gt;();

  const handleFileChanged = ({ file }) =&gt; {
    if (file.status === 'removed') {
      setFileList(&#091;]);
    } else if (file.status === 'uploading') {
      setFileList(&#091;file]);
    } else if (file.status === 'done') {
      const {
        createSignedUrl: { url },
      } = uploadFileData;

      const newFile = {
        ...file,
        url,
      };
      setFileList(&#091;newFile]);
      notification.success({ message: 'Image updated successfully' });
    }
  };

  const handleBeforeCrop = (file: any): boolean =&gt; {
    // Do some checks like image type and size...
    return true;
  };

  const handleBeforeUpload = async ({ name, type }): Promise&lt;void&gt; =&gt; {
    
    // Headers are required by Amazon S3
    setHeaders({
      'x-amz-acl': 'public-read',
      'Content-Type': type,
    });

    // Fetches the Signed URL from S3 bucket
    // Prepend with the ID to make the file name unique
    await uploadFile({
      variables: {
        input: {
          fileName: `${id}.${name}`,
          fileType: type,
        },
      },
    });
  };

  // Custom xhr upload method
  const handleUpload = async ({ onSuccess, onError, file }: any) =&gt; {
    const xhr = new XMLHttpRequest();
    const {
      createSignedUrl: { signedRequest, url },
    } = uploadFileData;

    // S3 requires PUT method!
    xhr.open('PUT', signedRequest);
    xhr.onreadystatechange = async () =&gt; {
      if (xhr.readyState === 4) {
        if (xhr.status === 200) {

          // Calls the update prop 
          await updatePicture({
            variables: { input: { picture: url } },
          });
          onSuccess(null, file);
        } else {
          onError(xhr.responseText, xhr.response, file);
        }
      }
    };
    xhr.send(file);
  };

  // SignedRequest from s3 needs to be set as the action. This is the glue.
  const action = uploadFileData?.createSignedUrl?.signedRequest;

  return (
    &lt;ImgCrop zoom rotate shape="round" beforeCrop={(e) =&gt; handleBeforeCrop(e)}&gt;
      &lt;Upload
        listType="picture-card"
        action={action}
        headers={headers}
        fileList={fileList}
        showUploadList={{ showDownloadIcon: false, showPreviewIcon: true }}
        customRequest={(e) =&gt; handleUpload(e)}
        beforeUpload={(args) =&gt; handleBeforeUpload(args)}
        onChange={(e) =&gt; handleFileChanged(e)}
      &gt;
        {fileList.length === 0 &amp;&amp; '+ Upload'}
      &lt;/Upload&gt;
    &lt;/ImgCrop&gt;
  );
};
export default ProfilePic;
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>829</wp:post_id>
		<wp:post_date><![CDATA[2020-09-10 01:52:55]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-09-09 14:52:55]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-09-10 01:52:55]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-09-09 14:52:55]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ant-design-upload-to-s3-bucket-and-graphql]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="ant-design"><![CDATA[ant-design]]></category>
		<category domain="post_tag" nicename="aws"><![CDATA[aws]]></category>
		<category domain="post_tag" nicename="graphql"><![CDATA[graphql]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
		<category domain="post_tag" nicename="s3"><![CDATA[s3]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1599663179]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[48634200296]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1303707987349913600";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:comment>
			<wp:comment_id>718</wp:comment_id>
			<wp:comment_author><![CDATA[John]]></wp:comment_author>
			<wp:comment_author_email><![CDATA[jhodorowicz@teamworks.com]]></wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP><![CDATA[172.125.169.121]]></wp:comment_author_IP>
			<wp:comment_date><![CDATA[2021-02-27 23:48:49]]></wp:comment_date>
			<wp:comment_date_gmt><![CDATA[2021-02-27 12:48:49]]></wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This was helpful for me working on something similar!

I'm trying to see how to cancel/abort d xhr request onRemove() - when a user removes the file prior to successful upload. Have you attempted that in a future iteration? Would appreciate any tips if you knew how to implement!]]></wp:comment_content>
			<wp:comment_approved><![CDATA[1]]></wp:comment_approved>
			<wp:comment_type><![CDATA[]]></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_result]]></wp:meta_key>
			<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1614430130.781879;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1614434028.762622;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_jobid]]></wp:meta_key>
			<wp:meta_value><![CDATA[57600484984]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[email_notification_queued]]></wp:meta_key>
			<wp:meta_value><![CDATA[1619387056]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[jabber_published]]></wp:meta_key>
			<wp:meta_value><![CDATA[1619387056]]></wp:meta_value>
			</wp:commentmeta>
						<wp:commentmeta>
	<wp:meta_key><![CDATA[akismet_history]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1619387056.831017;s:5:"event";s:15:"status-approved";s:4:"user";s:10:"dejanvasic";}]]></wp:meta_value>
			</wp:commentmeta>
							</wp:comment>
					</item>
					<item>
		<title><![CDATA[Ant Design Async Input Validation]]></title>
		<link>https://dejanvasic.wordpress.com/2020/12/21/ant-design-async-validation/</link>
		<pubDate>Mon, 21 Dec 2020 12:08:18 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=842</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:image {"align":"center","id":848,"width":359,"height":230,"sizeSlug":"large","linkDestination":"media"} -->
<div class="wp-block-image"><figure class="aligncenter size-large is-resized"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2020/12/image.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2020/12/image.png?w=1024" alt="" class="wp-image-848" width="359" height="230" /></a></figure></div>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Recently I came across the scenario where I needed to validate phone number or email are unique. So I had to use some server side validation on a form input. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>There's a few ways that this can be solved.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Doing the validation in the API on form submit is definitely one of them. This logic should definitely remain server side in any case, since we don't want to completely rely on protecting our system only on our clients. I've even gone ahead and ensured that the Database Table has a unique only value for phone and email. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>But how can we improve the user experience, so they don't have to wait to click a button and only then find out? Well, a nice way to do it is, is while the user typing or the input is validating.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><a href="https://ant.design">Ant Design</a> docs could be a little friendlier, but I actually found the custom validator supports the async (or server side) validation out of the box. Check out this really simple PhoneInput component with Apollo GraphQL as a nice touch :) </p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">import React from 'react';
import { useMutation } from '@apollo/client';
import gql from 'graphql-tag';
import { Input, Form } from 'antd';
import { PhoneOutlined } from '@ant-design/icons';

interface Props {
  required?: boolean;
  validateUnique?: boolean;
}

interface ValidateResponse {
  validatePhone: boolean;
}

interface ValidateRequest {
  phoneNumber: string;
  ignoreMyPhone: boolean;
}

const VALIDATE_PHONE = gql`
  mutation VerifyPhone($phoneNumber: String!) {
    validatePhone(phoneNumber: $phoneNumber)
  }
`;

const PhoneInput = ({ required = true, validateUnique = true }: Props) =&gt; {
  const [validatePhone] = useMutation&lt;ValidateResponse, ValidateRequest&gt;(VALIDATE_PHONE);

  const pattern = /^!*([0-9]!*){10,10}$/g;

  const handlePhoneValidation = async (_, phoneNumber: string): Promise&lt;boolean&gt; =&gt; {
    const resp = await validatePhone({ variables: { phoneNumber, ignoreMyPhone } });

    if (!resp.data.validatePhone) {
      return Promise.reject(resp.data.validatePhone);
    }
    return Promise.resolve(true);
  };

  return (
    &lt;Form.Item
      name="phone"
      label="Phone"
      validateFirst={true}
      validateTrigger="onBlur"
      rules={[
        { required, message: 'Phone is required' },
        { pattern, message: 'Phone must be in the right format' },
        ...[
          validateUnique
            ? { validator: handlePhoneValidation, message: `This number is already associated to an account` }
            : null,
        ],
      ]}
      hasFeedback
    &gt;
      &lt;Input prefix={&lt;PhoneOutlined /&gt;} size="large" placeholder="04xxxxxxxx" /&gt;
    &lt;/Form.Item&gt;
  );
};

export default PhoneInput;</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Method <code>handlePhoneValidation</code> is invoked by the custom validator defined in the rules array of the field. It's as simple as declaring the method as async. We simple invoke the API method, and then we could either throw an error, or a rejected promise.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Another thing to note. The prop <code>validateFirst</code> is set to true. I don't really like this name, because it feels it needs explanation. Basically, it will only fire one validation at a time. In this instance, there is a pattern validator which is better to fire first before hitting our API. If something isn't working locally, it wouldn't make sense to load the server with an invalid field. Parallel validation sounds good, but not so much in this situation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The prop <code>validateTrigger</code> being set to <code>onBlur</code>, is another not-required property but in this instance I find useful because it will only fire when the focus leaves the element. The default Ant Design validation is on every keystroke.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>How about the server side? The GraphQL resolver should be quite simple. Try and find a user by phone and return the appropriate response.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code -->
<pre class="wp-block-syntaxhighlighter-code">interface Args {
  phoneNumber: string;
  ignoreMyPhone: boolean;
}

const validatePhone = async (_, args: Args, { dataSources, user }: ApiContext): Promise&lt;boolean&gt; =&gt; {
  const phoneNumber = userService.convertPhoneTo164(args.phoneNumber);
  if (!phoneNumber) {
    throw new UserInputError(Errors.INVALID_PHONE);
  }


  const { userRepository } = dataSources;
  const anotherUser = await userRepository.findByPhone(phoneNumber);

  return !anotherUser;
};

export default validatePhone;
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Happy validating!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>842</wp:post_id>
		<wp:post_date><![CDATA[2020-12-21 23:08:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2020-12-21 12:08:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2020-12-21 23:08:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2020-12-21 12:08:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[ant-design-async-validation]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="ant-design"><![CDATA[ant-design]]></category>
		<category domain="post_tag" nicename="forms"><![CDATA[forms]]></category>
		<category domain="post_tag" nicename="graphql"><![CDATA[graphql]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
		<category domain="post_tag" nicename="server-side-validation"><![CDATA[server-side-validation]]></category>
		<category domain="post_tag" nicename="validation"><![CDATA[validation]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1608552501]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[52486831590]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_external]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:1:{s:7:"twitter";a:1:{i:1637206;s:59:"https://twitter.com/dejanvasic85/status/1340992504506802177";}}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_done_9734322]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_done_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[publicize_twitter_user]]></wp:meta_key>
		<wp:meta_value><![CDATA[dejanvasic85]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_attr]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_dimensions]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_responsive_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_accordion_ie_support]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[amp_status]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[spay_email]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_is_tweetstorm]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Auth0 and Apollo GraphQL handling token expiry]]></title>
		<link>https://dejanvasic.wordpress.com/2021/04/18/auth0-and-apollo-graphql-handling-token-expiry/</link>
		<pubDate>Sun, 18 Apr 2021 09:08:58 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=860</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Seems like there is an abundance of articles out there to wire up <a href="https://auth0.com/docs/libraries/auth0-single-page-app-sdk">Auth0 SPA</a> library to a react with Apollo GraphQL application but none of them seem to explain how to handle the token expiry scenario (not easily anyway). Majority of the articles I found firstly didn't involve Auth0 and secondly they are based on 401 responses from a server in the GraphQL <a href="https://www.apollographql.com/docs/react/api/link/apollo-link-error/">ErrorLink</a> middleware followed by a <a href="https://able.bio/AnasT/apollo-graphql-async-access-token-refresh--470t1c8">complex fromPromise </a>calls to obtain a new token and then retry the original calls. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>After a few attempts at this pattern, I had no luck. So I decided to change the strategy from handling 401 server responses, to instead check the expiry date on then token, so if expired call <code>getTokenSilently</code> to get a new token. Simple.</p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":4} -->
<h4>Basic setup</h4>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>This youtube video is a really good example to follow along to setup the basic auth0 react Provider. It leaves you with only having to figure out which configuration values to apply in your application.</p>
<!-- /wp:paragraph -->

<!-- wp:embed {"url":"https:\/\/www.youtube.com\/watch?v=vqHkwTWbaUk","type":"rich","providerNameSlug":"youtube","responsive":true,"className":"wp-embed-aspect-16-9 wp-has-aspect-ratio"} -->
<figure class="wp-block-embed is-type-rich is-provider-youtube wp-block-embed-youtube wp-embed-aspect-16-9 wp-has-aspect-ratio"><div class="wp-block-embed__wrapper">
https://www.youtube.com/watch?v=vqHkwTWbaUk
</div></figure>
<!-- /wp:embed -->

<!-- wp:heading -->
<h2>Backend</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The tech stack used here as an example uses a <a href="https://koajs.com/">Koa</a> server with a route <code>/api/graphql</code> that is requires an auth token. The middleware auth can be applied now by using the <code>koa-jwt</code> package along with <code>jwks-rsa</code>. The youtube video above provides a walkthrough on setting up authorization on graphQL operations. This does definitely make it more flexible.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Looking at the middleware code:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { Context, Next } from 'koa';
import jwt from 'koa-jwt';
import jwtrsa from 'jwks-rsa';


export default function ({ auth: { domain, audience } }) {
  return jwt({
    secret: jwtrsa.koaJwtSecret({
      jwksUri: `https://${domain}/.well-known/jwks.json`,
      cache: true,
      cacheMaxEntries: 5,
    }),
    audience: audience,
    issuer: `https://${domain}/`,
    algorithms: &#091;'RS256'],
  }).unless({ path: &#091;/^\/api\/(playground)/] });
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>You may notice that the Playground path is excluded. Now, in the koa app setup we just add the required middleware:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import Koa from 'koa';
import config from './config';
import authMiddleware from './authMiddleware';
import { graphQLServer, graphQLPlayground } from './graphql';

const app = new Koa();
app.use(mount('/api', authMiddleware(config)));

// setup 
graphQLServer.applyMiddleware({ app, path: '/api/graphql' });
graphQLPlayground.applyMiddleware({ app, path: '/api/playground' });

// start it up
app.listen(4000);</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>Frontend</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The grunt of the work to handle this situation happens in the Apollo graphQL client middleware. But I'll start providing the code examples from the GraphQL provider:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import createClient from './createClient';

const GraphQLProvider = ({ children }: Props) =&gt; {
  const auth = useAuth()!;

  const { getTokenSilently } = auth;

  const client = createClient({ getTokenSilently});

  return &lt;ApolloProvider client={client}&gt;{children}&lt;/ApolloProvider&gt;;
};

export default GraphQLProvider;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The <code>createClient</code> method returns a new GraphQL client. The key part of this snippet is the order in which the links are created. The auth0Link comes first and is responsible to always ensure that there is a valid token. The authLink is only responsible for attaching the token in to the http headers. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>export default function createClient({ getTokenSilently }) {
  const auth0Link = createAuth0Link({ getTokenSilently });
  const errorLink = ...;
  const webSocketLink = ...;

  const splitLink = split(
    ({ query }) =&gt; {
      const definition = getMainDefinition(query);
      return definition.kind === 'OperationDefinition' &amp;&amp; definition.operation === 'subscription';
    },
    webSocketLink,
    httpLink,
  );

  const authLink = setContext((_, { headers, auth0Token }) =&gt; ({
    headers: {
      ...headers,
      ...(auth0Token ? { Authorization: `Bearer ${auth0Token}` } : {}),
    },
  }));

  const link = from(&#091;auth0Link, errorLink, authLink, splitLink]);
  const cache = createInMemoryCache();
  const apolloClient = new ApolloClient&lt;NormalizedCacheObject&gt;({
    link,
    cache,
  });

  return apolloClient;
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So let's have a look at the auth0Link:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import jwtDecode, { JwtPayload } from 'jwt-decode';

let cachedToken: string;
let tokenExpiry: Date;

export const getAuthToken = async ({ getTokenSilently }) =&gt; {
  if (cachedToken &amp;&amp; tokenExpiry &gt; new Date()) {
    return cachedToken;
  }

  console.log('Requesting new token. Old one expired');
  const newToken = await getTokenSilently();
  cachedToken = newToken;
  const { exp } = jwtDecode&lt;JwtPayload&gt;(newToken);
  tokenExpiry = new Date(exp * 1000);
  return cachedToken;
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>As mentioned at the start of this post, the <code>getTokenSilently</code> is the method we need to invoke from Auth0 to get a new jwt token. But we only want to get a new one if the cached one has expired. And this is quite simple by using the jwt-decode library and storing the token expiry date when we receive a new one. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy coding...</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>860</wp:post_id>
		<wp:post_date><![CDATA[2021-04-18 19:08:58]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-04-18 09:08:58]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-04-18 19:11:56]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-04-18 09:11:56]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[auth0-and-apollo-graphql-handling-token-expiry]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="apollo"><![CDATA[apollo]]></category>
		<category domain="post_tag" nicename="auth0"><![CDATA[auth0]]></category>
		<category domain="post_tag" nicename="graphql"><![CDATA[graphql]]></category>
		<category domain="post_tag" nicename="jwt"><![CDATA[jwt]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
		<category domain="post_tag" nicename="session-expiry"><![CDATA[session-expiry]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1618736941]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[57298839593]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_abefe1176b422762d62c5db106263ec9]]></wp:meta_key>
		<wp:meta_value><![CDATA[<div class="embed-youtube"><iframe title="Securing GraphQL with Auth0" width="782" height="440" src="https://www.youtube.com/embed/vqHkwTWbaUk?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_abefe1176b422762d62c5db106263ec9]]></wp:meta_key>
		<wp:meta_value><![CDATA[1725031820]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_5dc4db0c0a803a7f479f6a4880aab265]]></wp:meta_key>
		<wp:meta_value><![CDATA[<div class="embed-youtube"><iframe title="Securing GraphQL with Auth0" width="750" height="422" src="https://www.youtube.com/embed/vqHkwTWbaUk?feature=oembed" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe></div>]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_oembed_time_5dc4db0c0a803a7f479f6a4880aab265]]></wp:meta_key>
		<wp:meta_value><![CDATA[1727431568]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Epic react course key takeaways - useState lazy load and react hook flow]]></title>
		<link>https://dejanvasic.wordpress.com/2021/08/23/epic-react-course-key-takeaways/</link>
		<pubDate>Sun, 22 Aug 2021 23:21:03 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=902</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>About a month ago I've started to slowly chip away at <a href="https://epicreact.dev/learn">Kent C Dodds Epic React course</a>, that was gratefully funded by Open Universities.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Although I've been building apps for production in React for a few years, I never really felt confident that I understood all the optimisations and craved to learn some useful patterns.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>It was my intention to document some of the learnings here, so that I can refer back to them (if any), and after doing a few modules I'm greatly to share some things. Some of them may be broken up in different posts to prevent an overly large post.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2>Calling useState with a function for Lazy Loading</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After visiting the React documentation, it was confirmed that this was not mentioned anywhere. Not sure why but it could be pretty useful, in particular to a situation outlined below. Every time we invoke useState, we can supply a function instead of a value. This function is the lazy initialiser and can be used for situations where setting initial state is a little more expensive than just setting a hardcoded value. One example used in the course was reading from local storage and deserializing an object for a nifty little <strong>useLocalStorage</strong> hook:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>function useLocalStorage(
  key,
  defaultValue = '',
  {serialize = JSON.stringify, deserialize = JSON.parse} = {},
) {
  // check out the function that we pass in to useState!
  const &#091;value, setValue] = React.useState(() =&gt; {
    const localStorageValue = window.localStorage.getItem(key)
    if (localStorageValue) {
      return deserialize(localStorageValue)
    }

    return typeof defaultValue === 'function' ? defaultValue() : defaultValue
  })

  const prevKeyRef = React.useRef(key)

  React.useEffect(() =&gt; {
    const prevKey = prevKeyRef.current
    if (prevKey !== key) {
      window.localStorage.removeItem(prevKey)
    }

    prevKeyRef.current = key
    window.localStorage.setItem(key, serialize(value))
  }, &#091;key, value, serialize])

  return &#091;value, setValue]
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2>React Hook flow Diagram</h2>
<!-- /wp:heading -->

<!-- wp:image {"id":884,"width":760,"height":968,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large is-resized"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2021/07/hook-flow.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2021/07/hook-flow.png?w=761" alt="" class="wp-image-884" width="760" height="968" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>Will be back for more next time.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>902</wp:post_id>
		<wp:post_date><![CDATA[2021-08-23 09:21:03]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-08-22 23:21:03]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2021-08-26 20:41:16]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2021-08-26 10:41:16]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[epic-react-course-key-takeaways]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="epicreact"><![CDATA[epicreact]]></category>
		<category domain="post_tag" nicename="kentcdodds"><![CDATA[kentcdodds]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1629674466]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[62162824222]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Next getServerSideProps High Order function in Typescript]]></title>
		<link>https://dejanvasic.wordpress.com/2021/10/27/next-getserversideprops-high-order-function-in-typescript/</link>
		<pubDate>Wed, 27 Oct 2021 04:50:51 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=908</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Have you needed to reuse some code for Next pages in particular within the server side function <code>getServerSideProps</code> when preparing the props for a page? </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Some common and practical examples include fetching a user and authorising them. But for simplicity sake, we'll use logging latency. Here we have a simple page that requires Props to be created based on an Api call. We want to capture the latency by capturing the current timestamp, execute code for assembling the props and then log the latency at the end.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import axios from 'axios';
import logger from './logger';

interface PageProps {
  hello: string;
}

export default function MyPage&lt;PageProps&gt;({hello}) {
  return &lt;h1&gt;{hello}&lt;/h1&gt;
}

export const getServerSideProps = async (ctx: GetServerSidePropsContext): Promise&lt;GetServerSidePropsResult&lt;P&gt;&gt; =&gt; {
  const startTime = Date.now();

  const apiResult = await axios.fetch('/api/hello');

  const finish = Date.now() - start;
  logger.info({ message: 'httpLog', latencyMs: finish });

  return {
    props: {
      hello: apiResult.data,
    }
  }
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>We may want to repeat our logging code in other pages. Copy pasting it would be breaking our DRY principles and that would make a lot of people sad.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Instead we can wrap our function in a High Order Function. In React this concept is very similar to HOC's and in Express think of this as middleware.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>For good measure, here's an example with Typescript!</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { GetServerSideProps, GetServerSidePropsContext, GetServerSidePropsResult } from 'next';

import logger from './logger';

export const withLogging = &lt;P extends { &#091;key: string]: any } = { &#091;key: string]: any }&gt;(gssp: GetServerSideProps&lt;P&gt;) =&gt; {
  return async (ctx: GetServerSidePropsContext): Promise&lt;GetServerSidePropsResult&lt;P&gt;&gt; =&gt; {
    const startTime = Date.now();
    const result = await gssp(ctx);
    const latency = Date.now() - startTime;

    logger.info({
      latency,
      msg: 'HttpLog',
      url: ctx.resolvedUrl,
    });

    return result;
  };
};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>So our re-written page function would look like:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>export const getServerSideProps = withLogging(async (ctx: GetServerSidePropsContext): Promise&lt;GetServerSidePropsResult&lt;P&gt;&gt; =&gt; {

  const apiResult = await axios.fetch('/api/hello');

  return {
    props: {
      hello: apiResult.data,
    }
  }
})</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Auth0 NextJS library uses a similar concept but much harder to read/understand code. https://github.com/auth0/nextjs-auth0/blob/main/src/helpers/with-page-auth-required.ts#L98</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>So this was my attempt to simplify it for others and provide a working example.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Happy coding</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>908</wp:post_id>
		<wp:post_date><![CDATA[2021-10-27 15:50:51]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2021-10-27 04:50:51]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-09-11 17:52:01]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-09-11 07:52:01]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[next-getserversideprops-high-order-function-in-typescript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="hoc"><![CDATA[hoc]]></category>
		<category domain="post_tag" nicename="nextjs"><![CDATA[nextjs]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[916]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1635310255]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[64630460871]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Query GraphQL in Nextjs and SSR Rehydration]]></title>
		<link>https://dejanvasic.wordpress.com/2022/02/28/query-graphql-in-nextjs-and-ssr-rehydration/</link>
		<pubDate>Mon, 28 Feb 2022 10:21:24 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=922</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>There are a bunch of articles on how to setup <a href="https://www.apollographql.com/blog/apollo-client/next-js/next-js-getting-started/">Apollo GraphQL in Nextjs</a> and a github repository from <a href="https://github.com/vercel/next.js/tree/canary/examples/with-apollo">NextJs docs</a>. Great starting points particularly for querying an API that is hosted externally to our App. The docs were not so generous however with describing how to accomplish server side rendering and performing query once on the server. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The data needs to make its way to the client on initial render and there are a couple of ways to achieve this. The method I made use of and describe here is to execute all the initial queries on the server page, extract the cache from the Apollo client, that will then be passed as a Page Prop to the Apollo Provider on the client. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><strong>User component with useQuery</strong></p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Let's say that we have the following component that makes use of  `useQuery` from Apollo. Without cache hydration, the component render would run on the server and the client producing multiple queries to the backend.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import React from 'react';
import { useQuery } from '@apollo/client';

import { USER_PROFILE } from './queries';

const UserProfile = () =&gt; {
  const { data, loading } = useQuery(USER_PROFILE);
  
  if (loading) {
      return &lt;div&gt;loading...&lt;/div&gt;;
   }

   return &lt;div&gt;Name: { data.user.name }&lt;/div&gt;
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="apollo-provider">Apollo provider</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In Nextjs we need to setup the Apollo provider. We do that in the root `_app.tsx` component with the apolloCache passed down as a page prop:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>export default function MyApp({ Component, pageProps, props }): JSX.Element {
  const apolloClient = useApollo({ initialCache: pageProps.apolloCache });
  const getLayout = Component.getLayout ?? getDefaultLayout;

  return (
      &lt;ApolloProvider client={apolloClient}&gt;
          {getLayout(&lt;Component {...pageProps} /&gt;)}
      &lt;/ApolloProvider&gt;
  );
}</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="apollo-client">Apollo client</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The useApollo function is a custom hook that is responsible for creating the Apollo client that will be used for either server or browser. Function can be found here:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import { useMemo } from 'react';
import { ApolloClient, NormalizedCacheObject, InMemoryCache } from '@apollo/client';

interface Props {
  initialCache: NormalizedCacheObject;
}

let _cachedClient: ApolloClient&lt;NormalizedCacheObject&gt;;

const getOrCreateApolloClient = ({ initialCache }: Props) =&gt; {
  if (_cachedClient) {
    if (initialCache) {
      _cachedClient.cache.restore(initialCache);
    }

    return _cachedClient;
  }

  _cachedClient = new ApolloClient&lt;NormalizedCacheObject&gt;({
    cache: new InMemoryCache(),
    credentials: 'same-origin',
    uri: '/api/graphql',
  });

  _cachedClient.cache.restore(initialCache);
  return _cachedClient;
};

export default function useApollo({ initialCache }: Props) {
  const client = useMemo(() =&gt; getOrCreateApolloClient({ initialCache }), &#091;initialCache]);

  return client;
}</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The uri `/api/graphql` is the relative url configured for GraphQL server running within the same App. </p>
<!-- /wp:paragraph -->

<!-- wp:heading {"level":3} -->
<h3 id="nextjs-page">NextJS Page</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Here's NextJS page app with getServerSideProps method preparing the apolloCache:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>
const UserProfilePage = ({ errorCode, ...restProps }) =&gt; {
  if (errorCode) {
    return &lt;Error statusCode={errorCode} /&gt;;
  }

  return &lt;UserProfile {...restProps} /&gt;;
};

export const getServerSideProps: GetServerSideProps&lt;UserProfilePageProps&gt; = async (context) =&gt; {
  const apolloClient = await createServerApolloClient({ context });

  await apolloClient.query({
    query: USER_PROFILE,
    variables: {
      username,
    },
  });

  const apolloCache = apolloClient.cache.extract();

  return {
    props: {
      apolloCache,
    },
  };
};

export default UserProfilePage;</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 id="apollo-client-for-the-server">Apollo client for the server</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The call to creating the Apollo client on the server is important for querying database resources. Since the schema and methods are located locally we can make use of the <code>makeExecutableSchema</code> method from graphQL tools and pass in the schema and resolvers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This was the missing piece for me when searching for solutions online.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>export async function createServerApolloClient({
  context
}: {
  context: GetServerSidePropsContext;
}): Promise&lt;ApolloClient&lt;NormalizedCacheObject&gt;&gt; {

  const schema = makeExecutableSchema({ typeDefs, resolvers });

  return new ApolloClient&lt;NormalizedCacheObject&gt;({
    link: new SchemaLink({
      schema,
      context: (): ApiContext =&gt; {
        return { db, config };
      },
    }),
    ssrMode: true,
    cache: new InMemoryCache(),
  });
}
</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Other resources including the article <a href="https://developers.wpengine.com/blog/apollo-client-cache-rehydration-in-next-js">from Kellen Mace</a> is really useful for querying remote API's externally to our Next App.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Hopefully this article can help you and fill the gap on querying from the same server.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>922</wp:post_id>
		<wp:post_date><![CDATA[2022-02-28 21:21:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-02-28 10:21:24]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2022-05-08 15:05:21]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2022-05-08 05:05:21]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[query-graphql-in-nextjs-and-ssr-rehydration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_attr]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_dimensions]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1646043687]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_responsive_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_accordion_ie_support]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[spay_email]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[jetpack_anchor_podcast]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[jetpack_anchor_episode]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[jetpack_anchor_spotify_show]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_is_tweetstorm]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_feature_enabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[933]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Next Images in Storybook]]></title>
		<link>https://dejanvasic.wordpress.com/2022/05/08/next-images-in-storybook/</link>
		<pubDate>Sun, 08 May 2022 09:09:32 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=936</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>The <a href="https://nextjs.org/docs/api-reference/next/image">Image</a> component is very much a key selling point for the Next framework. This is a must use for performance and user experience but a situation inevitably arises to use it in a custom component that we'd like to test out in <a href="https://storybook.js.org">Storybook</a>. Doing this produces the following error.</p>
<!-- /wp:paragraph -->

<!-- wp:quote -->
<blockquote class="wp-block-quote"><!-- wp:paragraph -->
<p>Invalid src prop xxx on next/image hostname xxx is not configured under images in your next.config.js </p>
<!-- /wp:paragraph --></blockquote>
<!-- /wp:quote -->

<!-- wp:image {"id":940,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2022/05/image.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2022/05/image.png?w=1024" alt="" class="wp-image-940" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>When I ran to this problem initially, <a href="https://stackoverflow.com/a/64765638/971085">I found the original solution worked a treat</a>. However, after a Nextjs <a href="https://github.com/vercel/next.js/releases/tag/v12.1.5">12.1.5</a> release, the issue came back and the original workaround lost the battle.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>To simply remove this error in storybook, we just need to apply the `unoptimized` prop to the `next/image` component and voila! Storybook is back and working again.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>&lt;Image src="https://images.unsplash.com/photo-1534353436294-0dbd4bdac845?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDF8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=1287&amp;q=80" height={50} width={50} unoptimized /&gt;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>But this isn't how we want roll in production so we need to find a way to apply this prop to be false only in production code. A strategy I found useful here to use is the React Context. So we begin by creating the Provider and Context which has the <code>unoptimized</code> prop and set to false by default.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import React from 'react';<br><br>interface ImageOptions {<br>  unoptimized: boolean;<br>}<br><br>interface ProviderProps extends ImageOptions {<br>  children: React.ReactNode;<br>}<br><br>export const ImageOptimisationContext = React.createContext&lt;ImageOptions&gt;({ unoptimized: false });<br><br>// This provider is useful for allowing storybook to use a unoptimized: true<br>export const ImageOptimisationProvider = ({ children, unoptimized }: ProviderProps) =&gt; {<br>  return &lt;ImageOptimisationContext.Provider value={{ unoptimized }}&gt;{children}&lt;/ImageOptimisationContext.Provider&gt;;<br>};<br></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>The new custom wrapper Image component gets access to the React context and applies this property along with the rest of the <code>next/image</code> component. And is very similar to the solution applied previously.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import React from 'react';<br>import NextImage, { ImageProps } from 'next/image';<br><br>import { ImageOptimisationContext } from '@providers';<br><br>const Image = (props: ImageProps) =&gt; {<br>  const { unoptimized } = React.useContext(ImageOptimisationContext);<br>  return &lt;NextImage {...props} unoptimized={unoptimized} /&gt;;<br>};<br><br>export default Image;</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Wherever we use the next/image component, we replace it with our custom Image. Whip that find and replace if you like to live on the edge.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>// From<br>import Image from 'next/image`;<br><br>// To<br>import Image from './components'</code></pre>
<!-- /wp:code -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">The final touch</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p><a href="https://storybook.js.org/docs/react/writing-stories/decorators#global-decorators">A global storybook</a> decorator would flip the prop to true and we should once again be rid of this issue, or at least for now.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><code>./storybook/preview.js</code></p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import React from 'react';<br><br>import { ImageOptimisationProvider } from '../src/providers';<br><br>export const decorators = &#091;<br>  (Story) =&gt; (<br>    &lt;ImageOptimisationProvider unoptimized={true}&gt;<br>      &lt;Story /&gt;<br>    &lt;/ImageOptimisationProvider&gt;<br>  ),<br>];</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Happy story booking...</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>936</wp:post_id>
		<wp:post_date><![CDATA[2022-05-08 19:09:32]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2022-05-08 09:09:32]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-04 11:46:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-04 00:46:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[next-images-in-storybook]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[941]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_skip_1637206]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[72279556754]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1652000976]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v4:1709513220]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[["React","Javascript","Web Development","Typescript","ReactJS"]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Asserting Either in Vitest]]></title>
		<link>https://dejanvasic.wordpress.com/2023/11/11/asserting-either-in-vitest/</link>
		<pubDate>Fri, 10 Nov 2023 22:24:21 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=963</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Discovering the potential of the FP-TS library has been a rewarding experience, unlocking the power of functional programming. However, integrating it seamlessly can pose challenges. In my recent exploration of extending vitest matchers for the FP-TS 'Either' object, I encountered obstacles—particularly TypeScript's reluctance to recognize custom matchers.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>This post aims to share insights gained from overcoming these challenges, providing a guide for those grappling with TypeScript's nuances or seeking to enhance their testing suite for FP-TS. Let's dive in:</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Ok. Let's start with a super simple function that returns Either right when a number is positive or a Left with a message when the number is negative:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>const isPositive = (n: number): E.Either&lt;string, number&gt; =&gt; {<br>	return n &gt;= 0 ? E.right(n) : E.left('Negative number');<br>};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>How could we write a test for it?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import * as E from 'fp-ts/Either';<br>import { describe, it, expect } from 'vitest';<br><br>const isPositive = (n: number): E.Either&lt;string, number&gt; =&gt; {<br>	return n &gt;= 0 ? E.right(n) : E.left('Negative number');<br>};<br><br>describe('Either', () =&gt; {<br>	it('isPositive', () =&gt; {<br>		const result = isPositive(1);<br>		expect(E.isRight(result)).toBe(true);<br>	});<br>});<br></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Using the <code>isRight</code> or <code>isLeft</code> utility from Either is great to assert the result type but what about the actual value (right or left object value)?</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Given the <strong><a href="https://gcanti.github.io/fp-ts/modules/Either.ts.html">Either</a></strong> is a union type in Typescript the only way to gain access to the Right or Left object without errors is by checkin the tag first:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>	it('isPositive', () =&gt; {<br>		const result = isPositive(1);<br>		expect(E.isRight(result)).toBe(true);<br>		if (E.isRight(result)) {<br>			expect(result.right).toBe(1);<br>		}<br>	});</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Having if statements in test code doesn't feel very clean!</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Wouldn't it be nice if we could do both at once like this for left or right by calling a method like <code>toBeRightStrictEqual</code> which with is akin to the <code>toStrictEquals</code>?</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>	it('isPositive', () =&gt; {<br>		const result = isPositive(1);<br>		expect(result).toBeRightStrictEqual(1);<br>	});<br><br>	it('isNegative', () =&gt; {<br>		const result = isPositive(-1);<br>		expect(result).toBeLeftStrictEqual('Negative number');<br>	});</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Easy. Vitest has it covered with <a href="https://vitest.dev/guide/extending-matchers">custom matchers.</a> First we'll need the setup file for vitest config that has the actual matchers:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import * as E from 'fp-ts/Either';<br>import * as vitest from 'vitest';<br><br>declare module 'vitest' {<br>	interface CustomMatchers&lt;R = unknown&gt; {<br>		toBeRightStrictEqual(expected: any): R;<br>	}<br>}<br><br>vitest.expect.extend({<br>	toBeRightStrictEqual(received: E.Either&lt;unknown, unknown&gt;, expected: unknown) {<br>		return {<br>			pass: E.isRight(received) &amp;&amp; this.equals(received.right, expected),<br>			message: () =&gt; `expected ${received} to be right ${expected}`<br>		};<br>	},<br>	toBeLeftStrictEqual(received, expected) {<br>		return {<br>			pass: E.isLeft(received) &amp;&amp; this.equals(received.left, expected),<br>			message: () =&gt; `expected ${received} to be left ${expected}`<br>		};<br>	}<br>});<br></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Finally. We then need the the declarations file for Typescript. This file should be able to live anywhere in your src directory. I named it <code>vitest.extend.d.ts</code>. The contents:</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>interface CustomMatchers&lt;R = unknown&gt; {<br>	toBeRightStrictEqual(data: unknown): R;<br>	toBeLeftStrictEqual(data: unknown): R;<br>}<br><br>declare module 'vitest' {<br>	interface Assertion&lt;T = any&gt; extends CustomMatchers&lt;T&gt; {}<br>	interface AsymmetricMatchersContaining extends CustomMatchers {}<br>}<br><br>export {};<br></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>Hope this helps others keep their code clean with some nicer Either assertions in Typescript!</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>963</wp:post_id>
		<wp:post_date><![CDATA[2023-11-11 09:24:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-11-10 22:24:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-04 11:45:35]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-04 00:45:35]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[asserting-either-in-vitest]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="functional-programming"><![CDATA[Functional Programming]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[jetpack_seo_noindex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[jetpack_seo_html_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[Asserting Either result in Vitest]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[advanced_seo_description]]></wp:meta_key>
		<wp:meta_value><![CDATA[FP-TS library has the Either type and this blog post tries to provide a nice way of asserting the result.]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wpcom_is_first_post]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v4:1709513138]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_attr]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_dimensions]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_responsive_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_accordion_ie_support]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_post_was_ever_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_newsletter_access]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_newsletter_tier_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[footnotes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_is_tweetstorm]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_feature_enabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1699655066]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[["Typescript","Javascript","Programming","Testing","Software Development"]]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[My Journey into Functional Programming with Kotlin and Svelte Kit]]></title>
		<link>https://dejanvasic.wordpress.com/2023/12/10/my-journey-into-functional-programming-with-kotlin-and-svelte-kit/</link>
		<pubDate>Sun, 10 Dec 2023 12:38:18 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=981</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Embarking on my journey into functional programming, I initially delved into <a href="https://www.amazon.com.au/Functional-Programming-Kotlin-Marco-Vermeulen/dp/161729716X/ref=sr_1_3?crid=36ISJYEU4WJ5H&amp;keywords=functional+programming+in+kotlin&amp;qid=1702176794&amp;sprefix=functional+programming+in+kotlin%2Caps%2C280&amp;sr=8-3">Kotlin</a>. Concurrently, I was acquainting myself with Svelte Kit by crafting a <a href="https://github.com/dejanvasic85/post-it">simple Notes app.</a> Although the allure of using both languages was enticing, fate led me to discover the <a href="https://gcanti.github.io/fp-ts">fp-ts library</a> for Node.js. This prompted me to rewrite some API endpoints, incorporating intriguing functional concepts, especially in error handling. This blog post serves as a comparative exploration of the imperative and functional styles, aiming to foster an appreciation for the evolutionary shift in approach.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Imperative style</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Let's start by dissecting a straightforward Svelte Typescript API endpoint that employs an imperative style for a GET request in a Notes app. For simplicity, the function assumes that user authentication has made the user ID available on the <code>locals</code> object.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1004,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-5.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-5.png?w=1024" alt="" class="wp-image-1004" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The imperative style handles errors at the API level with different status codes for various scenarios: Note not found (404), user not found (403), unauthorized access (403), and unexpected errors (500).</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Now imagine the other API methods like PATCH and DELETE. What would they look like and how much repetition would be required such as checking item existence and returning not found. One option would be creating shared services that return results that would then be mapped to an API result. At this point, something was telling me that this could be solved in better style using a function approach.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">The functional style</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Now, let's delve into the functional approach:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1006,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-6.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-6.png?w=1024" alt="" class="wp-image-1006" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The TE is a naming <a href="https://gcanti.github.io/fp-ts/guides/code-conventions.html">convention</a> in fp-ts used for <a href="https://gcanti.github.io/fp-ts/modules/TaskEither.ts.html">TaskEither</a> which is basically akin of the Either type for asynchronous operations. Given we are in the world of node, we are almost always in a context of async and promises and that makes TaskEither container a very common tool. </p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li>We use the pipe method to start the chain</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>TE.Do</code> initializes a sequence of operations.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>TE.bind('user', () =&gt; getUser({ id: locals.user.id! }))</code> retrieves the user with the given ID. The ! operator asserts that locals.user.id is not null or undefined. The bind method adds the user property to the TaskEither right container and is automatically available in the next method in the chain.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>TE.bind('note', () =&gt; getNoteById({ id: params.id! }))</code> retrieves the note with the given ID. Again, the ! operator asserts that params.id is not null or undefined.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>TE.flatMap(({ user, note }) =&gt; isNoteOwner({ user, note }))</code> checks if the retrieved user is the owner of the retrieved note. These two objects are made available because of the bind method.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><code>TE.mapLeft(mapToApiError)</code> maps any errors that occur during these operations to API errors. </li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Finally, the <code>TE.match</code> function is used to handle the result of the operations. If an error occurred, it returns a JSON response with the error message and status. If the operations were successful, it returns a JSON response with the note.</li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading {"level":3} -->
<h3 class="wp-block-heading">Separation of concerns</h3>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Digging deeper, the methods for data retrieval and validation return a Server Error in the left container. For example, the <code>getUser</code> method has the following signature:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1009,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-7.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-7.png?w=1024" alt="" class="wp-image-1009" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>The method is part of a repository layer and should not have any knowledge about API statuses like 404 or 500 but it should be able to return specific errors like database connection error, or a record not found error. In typescript we could take advantage of union types to handle this:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1011,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-8.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-8.png?w=1024" alt="" class="wp-image-1011" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We can proceed to compose methods that operate on the business errors (ServerError) and when we're ready it can then be mapped to an API error where it matters. </p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1012,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-9.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2023/12/image-9.png?w=1024" alt="" class="wp-image-1012" /></a></figure>
<!-- /wp:image -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Although I'm only scratching the surface of functional programming, the moment I discovered TaskEither in fp-ts I knew it was enough to build something practical. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>In my perspective, the functional approach yields cleaner, more predictable, and idiomatic code at the API level. It provides a systematic and structured way to handle errors, promoting separation of concerns and ensuring a more robust and maintainable codebase. Embracing functional programming in this context proves to be a transformative journey, enhancing the overall development experience.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>981</wp:post_id>
		<wp:post_date><![CDATA[2023-12-10 23:38:18]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2023-12-10 12:38:18]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2023-12-10 23:46:38]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2023-12-10 12:46:38]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[my-journey-into-functional-programming-with-kotlin-and-svelte-kit]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[["Svelte","Programming","Power Platform","Openai","Networking","Azure Openai Service","Azure OpenAI"]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[firehose_sent]]></wp:meta_key>
		<wp:meta_value><![CDATA[1702211900]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[90158329940]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1702211902]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v4:1702212576]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Troubleshooting &amp; Fixing the 'Form Not Found' Issue in Next.js with React Hook Form]]></title>
		<link>https://dejanvasic.wordpress.com/2024/02/29/nextjs-ssr-with-react-hook-form-not-found-issue/</link>
		<pubDate>Wed, 28 Feb 2024 20:58:21 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=1016</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Recently, our Next.js application started reporting that a handful of users were experiencing a 'Not Found' error after submitting a form. Upon reviewing session replays, it became clear that users were encountering a 404 error immediately after form submission, despite the page and form being fully rendered.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">The problem</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>In our setup, we utilized <code><a href="https://react-hook-form.com/">react-hook-form</a></code> within a client-side component to manage form submissions, which would then fetch data to the server. The form resided on the <code>/citizenship</code> page, with data submissions directed to <code>/api/citizenship</code>. However, an issue arose when the JavaScript handler for the form submission hadn't yet loaded, leading users to unintentionally trigger a default GET request to a non-existent endpoint.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">The root cause</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>When a user initially loads the HTML page, the form is visible, but the JavaScript <code>onSubmit</code> handler is absent until the Next.js page chunk fully loads. If a user submits the form before the handler is ready, the form defaults to a GET action, appending the selected value as a URL parameter (e.g., <code>/citizenship?australianCitizen=yes</code>), leading to a 404 since that endpoint does not exist.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading"><strong>Solution 1: Disabling the Submit Button</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>To address this, we decided to prevent form submission until the JavaScript was fully loaded. This was achieved by disabling the submit button initially and then enabling it via <code>useEffect</code>, ensuring synchronicity between the handler's readiness and the button's activation.</p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>'use client';<br>import { useForm } from 'react-hook-form';<br>import { useState, useEffect } from 'react';<br><br>export const CitizenForm = () =&gt; {<br>  const &#091;isEnabled, setEnabled] = useState(false);<br>  const form = useForm();<br><br>  useEffect(() =&gt; {<br>    setEnabled(true);<br>  }, &#091;]);<br><br>  const onSubmit = (data) =&gt; {<br>    fetch('/api/citizenship', {<br>      method: 'POST',<br>      body: JSON.stringify(data),<br>    });<br>  };<br><br>  return (<br>    &lt;form onSubmit={form.handleSubmit(onSubmit)}&gt;<br>      ...<br>      &lt;button type="submit" disabled={!isEnabled}&gt;Submit&lt;/button&gt;<br>    &lt;/form&gt;<br>  );<br>};</code></pre>
<!-- /wp:code -->

<!-- wp:heading -->
<h2 class="wp-block-heading"><strong>Solution 2: Leveraging Server Actions</strong></h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Another potential solution, which I hadn't explored at the time, involves utilizing server actions in Next.js. This approach allows for form submissions without relying on client-side JavaScript, offering a more streamlined and elegant solution.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Conclusion</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Addressing the 'Form Not Found' issue in Next.js applications can be challenging but is crucial for maintaining a seamless user experience. By either disabling the submit button until the JavaScript loads or utilizing server actions, developers can ensure reliable form submissions in their applications.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p><em>Thank you for reading!</em></p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1016</wp:post_id>
		<wp:post_date><![CDATA[2024-02-29 07:58:21]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-02-28 20:58:21]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-03 11:22:10]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-03 00:22:10]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[nextjs-ssr-with-react-hook-form-not-found-issue]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="404"><![CDATA[404]]></category>
		<category domain="post_tag" nicename="nextjs"><![CDATA[nextjs]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
		<category domain="post_tag" nicename="react-hook-form"><![CDATA[react-hook-form]]></category>
		<category domain="post_tag" nicename="server-actions"><![CDATA[server-actions]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[["React","Javascript","Nextjs","Web Development","Typescript"]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[firehose_sent]]></wp:meta_key>
		<wp:meta_value><![CDATA[1709378766]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1709378769]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[92412463518]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_shares]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:6:"status";s:7:"failure";s:7:"message";s:60:"Error 401 (Unauthorized) -- Could not authenticate you. [32]";s:9:"timestamp";i:1709378770;s:7:"service";s:7:"twitter";s:13:"connection_id";i:9734322;s:13:"external_name";s:12:"dejanvasic85";}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v4:1709425314]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1030]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[SvelteKit with Auth0 integration]]></title>
		<link>https://dejanvasic.wordpress.com/2024/03/03/sveltekit-with-auth0-integration/</link>
		<pubDate>Sun, 03 Mar 2024 11:01:45 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=1031</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Auth0 excels at offering pre-made libraries for web applications. The Next.js template simplifies the process significantly, requiring only an npm install, configuration of environment variables, creation of a route for the auth endpoints, and finally, crafting components for managing login/logout buttons. Getting up and running is incredibly fast, sparing engineers from delving deeply into the nuances of how OAuth works.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>When it comes to integrating with new frameworks like SvelteKit, many of us (myself included) anticipate a similar experience. However, the convenience of these libraries has led to a loss of basic understanding of OAuth flows along the way. Why not take just 10 minutes to learn and implement it yourself? It's not as difficult as it seems!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Authorization code flow</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>For web applications with a backend server, you'll want to use the Authorization Code Flow, and implementing it in SvelteKit is straightforward. At the end of the flow, we issue a session cookie to the user and validate it on every request to our protected routes. Here's a diagram of the basic flow:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1038,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2024/03/image.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2024/03/image.png?w=1024" alt="" class="wp-image-1038" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>We need two endpoints for this flow: the initial authentication request from the user (for example, clicking a login link or requesting a protected page) and a callback endpoint for verifying the authorization code from Auth0. Similar to Next.js, we can leverage API endpoints to achieve this.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Login</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Starting with the login let's deep dive in to the GET request. You can create this file under <code>/routes/api/auth/login/+server.ts</code> </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>import type { RequestHandler } from '@sveltejs/kit';<br>import { AUTH0_DOMAIN, AUTH0_CLIENT_ID } from '$env/static/private';<br>import { PUBLIC_BASE_URL } from '$env/static/public';<br><br>export const GET: RequestHandler = ({ cookies, url }) =&gt; {<br>	const csrfState = Math.random().toString(36).substring(7);<br>	cookies.set('csrfState', csrfState, {<br>		httpOnly: true,<br>		sameSite: 'lax',<br>		maxAge: 1000,<br>		path: '/'<br>	});<br><br>	const returnUrl = encodeURIComponent(url.searchParams.get('returnUrl') || '/');<br><br>	const query = {<br>		scope: 'openid profile email',<br>		response_type: 'code',<br>		client_id: AUTH0_CLIENT_ID,<br>		redirect_uri: `${PUBLIC_BASE_URL}/api/auth/callback?returnUrl=${returnUrl}`,<br>		state: csrfState<br>	};<br><br>	return new Response(null, {<br>		status: 302,<br>		headers: {<br>			location: `https://${AUTH0_DOMAIN}/authorize?${new URLSearchParams(query).toString()}`<br>		}<br>	});<br>};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This process is quite straightforward. We generate a random string to store in a cookie for the user. Using a cookie to provide the CSRF token to the client prevents successful attacks because the attacker cannot read the cookie value, which is required for server-side CSRF validation.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The code then creates a redirect URL to the Authorization server, passing additional parameters like the scopes required. In this snippet, we request the openid, profile, and email scopes. The return URL is also an important factor; the snippet redirects the user to the homepage by default unless a query parameter is passed. Another good option would be to redirect the user to the HTTP referrer of the incoming request.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Callback</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>Next up is the callback. I used the endpoint <code>/routes/api/auth/callback/+server.ts</code> </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>export const GET: RequestHandler = async ({ url, cookies }) =&gt; {<br>    const code = url.searchParams.get('code');<br>    const state = url.searchParams.get('state');<br>    const returnUrl = url.searchParams.get('returnUrl') || '/';<br><br>    const csrfState = cookies.get('csrfState');<br><br>    if (state !== csrfState || !code) {<br>        return new Response('Invalid state', { status: 403 });<br>    }<br><br>    try {<br>        const token = await getToken({ code }); <br>        const authUser = await verifyToken(token.id_token); <br>        const user = await getOrCreateUser({ authId: authUser.sub, authUserProfile: authUser }); <br><br>        setAuthCookie(cookies, user); <br>        cookies.delete('csrfState', { path: '/' });<br><br>        return new Response(null, { status: 302, headers: { location: returnUrl } });<br>    } catch (err) {<br>        return new Response(`Failed to get token. Err: ${err}`, { status: 500 });<br>    }<br>};<br><br><br>let cachedKey: string | undefined = undefined;<br><br>function getKey(header: JwtHeader, callback: SigningKeyCallback) {<br>	client.getSigningKey(header.kid, function (err, key) {<br>		if (err) {<br>			callback(err);<br>		}<br>		if (cachedKey) {<br>			callback(null, cachedKey);<br>		} else {<br>			const signingKey = key?.getPublicKey();<br>			cachedKey = signingKey;<br>			callback(null, signingKey);<br>		}<br>	});<br>}<br><br>export async function verifyToken&lt;T&gt;(token: string): Promise&lt;T&gt; {<br>	return new Promise((resolve, reject) =&gt; {<br>		jwt.verify(token, getKey, {}, (err, payload) =&gt; {<br>			if (err) {<br>				reject(err);<br>			} else {<br>				resolve(payload as T);<br>			}<br>		});<br>	});<br>}<br><br>export async function getToken({ code } ) {<br> const resp = await fetch(`https://${AUTH0_DOMAIN}/oauth/token`, {<br>			method: 'POST',<br>			body: JSON.stringify({<br>				code,<br>				client_id: AUTH0_CLIENT_ID,<br>				client_secret: AUTH0_CLIENT_SECRET,<br>				redirect_uri: `${PUBLIC_BASE_URL}/api/auth/callback`,<br>				grant_type: 'authorization_code'<br>			}),<br>			headers: {<br>				'Content-Type': 'application/json'<br>			}<br>		});<br>   return await resp.json();<br>}<br><br>export const setAuthCookie = (cookies: Cookies, user: User) =&gt; {<br>	const cookieValue = jwt.sign(user, SESSION_SECRET);<br>	cookies.set(COOKIE_NAME, cookieValue, {<br>		httpOnly: true,<br>		sameSite: 'lax',<br>		maxAge: COOKIE_DURATION_SECONDS,<br>		path: '/'<br>	});<br>};</code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This callback function does several important things:</p>
<!-- /wp:paragraph -->

<!-- wp:list {"ordered":true} -->
<ol><!-- wp:list-item -->
<li>It uses the query parameters to verify that the state matches the cookie value created during login.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>It uses the Auth code obtained from Auth0 to exchange it for a JWT token. This is done in <code>getToken</code>.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Verifying the token returns the payload, which should contain the user details.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>At this point, we can either create the user in our backend or simply proceed if we don't need to persist any user information.</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>A session cookie is created using our own secret, with properties including <code>httpOnly</code> to ensure it's not accessible in JavaScript.</li>
<!-- /wp:list-item --></ol>
<!-- /wp:list -->

<!-- wp:paragraph -->
<p>The environment variables are self-explanatory, and you can use third-party libraries like <code>jsonwebtoken</code> for verifying and signing JWTs.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Middleware: Extending session and protecting routes</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The final piece is the middleware. We need to make use of SvelteKit hooks.server.ts. </p>
<!-- /wp:paragraph -->

<!-- wp:code -->
<pre class="wp-block-code"><code>export const handle = async ({ event, resolve }) =&gt; {<br><br>	const cookie = event.cookies.get('session');<br>	const url = new URL(event.request.url);<br><br>	if (cookie) {<br>		// Extend the cookie<br>		const user = jwt.verify(cookie, SESSION_SECRET) as User;<br>		setAuthCookie(event.cookies, user);<br>		return await resolve(event);<br>	}<br><br>	if (!cookie &amp;&amp; privateRoutes.has(url.pathname)) {<br>		return new Response('LoginRequired', {<br>			status: 302,<br>			headers: { location: `/api/auth/login?returnUrl=${url.pathname}` }<br>		});<br>	}<br>	return await resolve(event);<br>};<br></code></pre>
<!-- /wp:code -->

<!-- wp:paragraph -->
<p>This method gets hit on every request. It decodes the contents of the session cookie, then sets a new cookie which extends it for the session duration, effectively creating a sliding window.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Your app should now be protected by Auth0!</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Relevant links</h2>
<!-- /wp:heading -->

<!-- wp:list -->
<ul><!-- wp:list-item -->
<li><a href="https://community.auth0.com/t/sveltekit-integration/72204">https://community.auth0.com/t/sveltekit-integration/72204</a> </li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://dominictobias.medium.com/writing-an-oauth-flow-from-scratch-in-nodejs-397496acafbe">https://dominictobias.medium.com/writing-an-oauth-flow-from-scratch-in-nodejs-397496acafbe</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://www.youtube.com/watch?v=DJvM2lSPn6w&amp;t=13s">https://www.youtube.com/watch?v=DJvM2lSPn6w&amp;t=13s</a></li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li><a href="https://www.reddit.com/r/sveltejs/comments/qgnmvx/sveltekit_auth0/">https://www.reddit.com/r/sveltejs/comments/qgnmvx/sveltekit_auth0/</a></li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1031</wp:post_id>
		<wp:post_date><![CDATA[2024-03-03 22:01:45]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-03-03 11:01:45]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-03-03 22:01:45]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-03-03 11:01:45]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[sveltekit-with-auth0-integration]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_newsletter_access]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[firehose_sent]]></wp:meta_key>
		<wp:meta_value><![CDATA[1709463707]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[wordads_ufa]]></wp:meta_key>
		<wp:meta_value><![CDATA[s:wpcom-ufa-v4:1709463851]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[jetpack_seo_noindex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_attr]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_dimensions]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_responsive_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_accordion_ie_support]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_post_was_ever_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_newsletter_tier_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[footnotes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1709463710]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_feature_enabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Creating Custom Svelte Component with Children Props in Typescript]]></title>
		<link>https://dejanvasic.wordpress.com/2024/12/14/creating-custom-svelte-component-with-children-props-in-typescript/</link>
		<pubDate>Sat, 14 Dec 2024 06:49:54 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=1057</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Let's say we have a custom Button component. And the API needs to as simple as:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">&lt;Button variant="primary"&gt;Hello &lt;Icon name="wave" /&gt;&lt;/Button&gt;</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Looks like we need two things:</p>
<!-- /wp:paragraph -->

<!-- wp:list -->
<ul class="wp-block-list"><!-- wp:list-item -->
<li>A prop for setting the variant</li>
<!-- /wp:list-item -->

<!-- wp:list-item -->
<li>Ability to render anything within the Button. </li>
<!-- /wp:list-item --></ul>
<!-- /wp:list -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Svelte 4 syntax</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>We needed an export let for the variant, and a slot for the children. So it was pretty simple:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">&lt;script lang="ts"&gt;
	export let variant: 'primary' | 'secondary' | 'tertiary';
&lt;/script&gt;

&lt;button on:click class="{variantClass(variant)}"&gt;
	&lt;slot /&gt;
&lt;/button&gt;
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>If you ask me, that looks damn fairly concise but a little magic. The <code>on:click</code> and <code>&lt;slot /&gt;</code> have a huge impact on the component but where are they coming from? It's not very clear. This has been fixed in Svelte 5.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Svelte 5 syntax</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>After looking at some examples online, my first implementation was this:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">&lt;script lang="ts"&gt;
   type Props = { variant: 'primary' | 'secondary' | 'tertiary' };

  let { variant }: Props = $props();
&lt;/script&gt;

&lt;button&gt;
   {@render children()}
&lt;/button&gt;</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Children however are not declared anywhere and I was getting a compilation error. </p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The <a href="https://svelte.dev/docs/svelte/$props">$props</a> documentation leaves a lot to be desired for Typescript and how to declare children. Got tired of hunting it down and ended up looking at one of my existing +layout.svelte where children was being used.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>By default children props are available when invoking the $props function without specifying any types. When hovering over the children function, you get the following:</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1064,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2024/12/image.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2024/12/image.png?w=868" alt="" class="wp-image-1064" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>I think that Snippet type is what we want! Trying to import it, immediately svelte module came up and it seemed to do the trick. The error was gone. At this point I'm not certain I have the right solution, but after no complaints from the compiler I'm going with it.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">import type { Snippet } from "svelte";

&lt;script lang="ts"&gt;
  type Props = { 
    children: Snippet&lt;[]&gt;;
    variant: 'primary' | 'secondary' | 'tertiary' 
  };

  let { children, variant }: Props = $props();
&lt;/script&gt;

&lt;button class="{variantClass(variant)}"&gt;
   {@render children()}
&lt;/button&gt;</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:heading -->
<h2 class="wp-block-heading">The on:click has been deprecated</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>The other magical svelte 4 syntax was the on:click. By declaring it on the button and not providing any value to it, it means that the event is being forwarded to the consumer directly. In Svelte 5 world, we just need to declare it as part of props with a slightly different name <code>onclick</code>. Here's the final code:</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">import type { Snippet } from "svelte";

&lt;script lang="ts"&gt;
  type Props = { 
    children: Snippet&lt;[]&gt;;
    variant: 'primary' | 'secondary' | 'tertiary';
    onclick: () =&gt; void;
  };

  let { children, variant }: Props = $props();
&lt;/script&gt;

&lt;button class="{variantClass(variant)}" {onclick}&gt;
   {@render children()}
&lt;/button&gt;</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Hopefully this helps someone! Thanks for reading.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1057</wp:post_id>
		<wp:post_date><![CDATA[2024-12-14 17:49:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2024-12-14 06:49:54]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2024-12-14 17:51:18]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2024-12-14 06:51:18]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[creating-custom-svelte-component-with-children-props-in-typescript]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="props"><![CDATA[$props]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="post_tag" nicename="react"><![CDATA[react]]></category>
		<category domain="category" nicename="svelte"><![CDATA[Svelte]]></category>
		<category domain="post_tag" nicename="typescript"><![CDATA[typescript]]></category>
		<category domain="post_tag" nicename="web-development"><![CDATA[web-development]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[["Javascript","Programming","Web Development","React","Technology"]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_pending]]></wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[firehose_sent]]></wp:meta_key>
		<wp:meta_value><![CDATA[1734158995]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1069]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[advanced_seo_description]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[jetpack_seo_html_title]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[jetpack_seo_noindex]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_attr]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_dimensions]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1734158998]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_responsive_height]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_coblocks_accordion_ie_support]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_post_was_ever_published]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_newsletter_access]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_dont_email_post_to_subs]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_jetpack_newsletter_tier_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elasticsearch_data_sharing_indexed_on]]></wp:meta_key>
		<wp:meta_value><![CDATA[2024-12-14 06:49:42]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[footnotes]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_feature_enabled]]></wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_wpas_options]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:2:{s:24:"image_generator_settings";a:2:{s:8:"template";s:7:"highway";s:7:"enabled";b:0;}s:7:"version";d:2;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_723a8b4838c668fbe5358116cfaa417990aacac0]]></wp:meta_key>
		<wp:meta_value><![CDATA[
				[contact-field label="Name" type="name"  required="true" /]
				[contact-field label="Email" type="email" required="true" /]
				[contact-field label="Website" type="url" /]
				[contact-field label="Message" type="textarea" /]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_atts_723a8b4838c668fbe5358116cfaa417990aacac0]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:17:{s:2:"to";s:22:"dejanvasic24@gmail.com";s:7:"subject";s:98:"[Software engineering notebook] Creating Custom Svelte Component with Children Props in Typescript";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:14:"block_template";N;s:19:"block_template_part";N;s:2:"id";i:1057;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouHeading";s:26:"Your message has been sent";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;s:9:"className";N;s:9:"postToUrl";N;s:14:"salesforceData";N;s:12:"hiddenFields";N;}]]></wp:meta_value>
		</wp:postmeta>
							</item>
					<item>
		<title><![CDATA[Displaying toast messages in Svelte 5]]></title>
		<link>https://dejanvasic.wordpress.com/2025/04/06/displaying-toast-messages-in-svelte-5/</link>
		<pubDate>Sun, 06 Apr 2025 12:02:09 +0000</pubDate>
		<dc:creator><![CDATA[dejanvasic]]></dc:creator>
		<guid isPermaLink="false">https://dejanvasic.wordpress.com/?p=1072</guid>
		<description></description>
		<content:encoded><![CDATA[<!-- wp:paragraph -->
<p>Toast messages are a lovely addition to any interface whether it's your Operating System, mobile or web application. There are decent articles that explain how and why to implement them.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>Since the Svelte 5 release, we have seen some changes to state management, so I'm going to provide my take on how to implement this feature. Along with Svelte, the two other building blocks I used are Tailwind and Melt UI. Creating functional and accessible components like Toasters is never easy, and I found these two provide a nice balance between not having to re-invent the wheel and allowing custom look and feel. This topic deserves its own blog post.</p>
<!-- /wp:paragraph -->

<!-- wp:heading -->
<h2 class="wp-block-heading">Managing global state</h2>
<!-- /wp:heading -->

<!-- wp:paragraph -->
<p>It is important to trigger toast messages from anywhere in the application, so I'm using global state for this. Any page or component should be able to publish a message, and the Toast component needs to be able to subscribe to it.</p>
<!-- /wp:paragraph -->

<!-- wp:image {"id":1076,"sizeSlug":"large","linkDestination":"media"} -->
<figure class="wp-block-image size-large"><a href="https://dejanvasic.wordpress.com/wp-content/uploads/2025/04/image.png"><img src="https://dejanvasic.wordpress.com/wp-content/uploads/2025/04/image.png?w=1024" alt="" class="wp-image-1076" /></a></figure>
<!-- /wp:image -->

<!-- wp:paragraph -->
<p>To create global state in Svelte 5, we can make use of the class variation. This is where we utilize the $state rune to store an array of messages. A simple addMessage method creates a unique identifier using the nanoid library, which is useful for Melt UI.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">import { getContext, setContext } from 'svelte';
import { nanoid } from 'nanoid';

export type ToastMessage = {
	message: string;
	type: 'success' | 'error';
    id: string;
    isShown: boolean;
};

export class ToastMessages {
	messages: ToastMessage[] = $state([]);

	constructor() {}

	addMessage(message: ToastMessage) {
		const id = nanoid();

		this.messages.push({
			...message,
			id,
			isShown: false
		});
	}
}

const ToastMessagesKey = Symbol('ToastMessages');

export function setToastMessages() {
	return setContext(ToastMessagesKey, new ToastMessages());
}

export function getToastMessages() {
	return getContext&lt;ReturnType&lt;typeof setToastMessages&gt;&gt;(ToastMessagesKey);
}
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The isShown property is very important here because this is what the Toaster component will use to determine whether to show the message. It will also be toggled in the component once it has been displayed.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The Toaster component is where everything comes together. It subscribes to global state using the $effect rune and combines Melt components with Tailwind classes.</p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">&lt;script lang="ts"&gt;
	import { slide } from 'svelte/transition';
	import { createToaster, melt } from '@melt-ui/svelte';

	import { getToastMessages } from '$lib/state/toastMessages.svelte';
	import Icon from '$components/Icon.svelte';
	import type { ToastMessage } from '$lib/types';

	const toastMessages = getToastMessages();

	const {
		elements: { content, description, close },
		helpers,
		states: { toasts },
		actions: { portal }
	} = createToaster&lt;ToastMessage&gt;({});

	$effect(() =&gt; {
		toastMessages.messages
			.filter((m) =&gt; m.isShown === false)
			.forEach((message) =&gt; {
				helpers.addToast({ type: 'background', data: message });
				message.isShown = true;
			});
	});
&lt;/script&gt;

&lt;div use:portal class="fixed left-1/2 top-2 z-toaster w-80 -translate-x-1/2 transform"&gt;
	{#each $toasts as { id, data } (id)}
		&lt;div use:melt={$content(id)}&gt;
			&lt;div
				in:slide={{ duration: 200 }}
				out:slide={{ duration: 200 }}
				class="mb-2 flex items-center justify-between rounded-lg p-4 text-sm shadow-lg dark:text-gray-900"
				class:bg-red-300={data.type === 'error'}
				class:bg-green-300={data.type === 'success'}
			&gt;
				&lt;div use:melt={$description(id)}&gt;
					{data.message}
				&lt;/div&gt;
				&lt;button use:melt={$close(id)} aria-label="close notification"&gt;
					&lt;Icon icon="x-mark" /&gt;
				&lt;/button&gt;
			&lt;/div&gt;
		&lt;/div&gt;
	{/each}
&lt;/div&gt;
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>The $effect rune is very straightforward. The messages are observed and filtered to find any that haven't been shown yet. The Melt helper is then used to add the toast to the UI, and the message's isShown property is set to true to prevent it from appearing again.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The above example uses center positioning with Svelte's slide transitions. These are obvious points of customization, and you can get creative with them. My use cases required just info and error messages, but you're not limited to these types. Simply add your own types and styling 🤷.</p>
<!-- /wp:paragraph -->

<!-- wp:paragraph -->
<p>The next part is calling the toaster in other pages and components! This is quite easy because we just need to import the global state and invoke the addMessage method. Just to see it working, onMount could be used.<br></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">import { getToastMessages } from '$lib/state/toastMessages.svelte';
import { onMount } from 'svelte';

const toastMessages = getToastMessages();

onMount(() =&gt; {
    toastMessages.addMessage({
	  type: 'success',
	  message: 'Congrats you have a toast.'
	});
});
 </pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Just don't forget to initialize the state and add the Toaster component. This can be done in the root layout.<br></p>
<!-- /wp:paragraph -->

<!-- wp:syntaxhighlighter/code {"language":"jscript"} -->
<pre class="wp-block-syntaxhighlighter-code">&lt;script lang="ts"&gt;
	import './app.css';
	import Toaster from '$components/Toaster.svelte';
	import { setToastMessages } from '$lib/state/toastMessages.svelte';

	let { children } = $props();
	setToastMessages();
&lt;/script&gt;

&lt;Toaster /&gt;
{@render children()}
</pre>
<!-- /wp:syntaxhighlighter/code -->

<!-- wp:paragraph -->
<p>Happy coding.</p>
<!-- /wp:paragraph -->]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>1072</wp:post_id>
		<wp:post_date><![CDATA[2025-04-06 22:02:09]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2025-04-06 12:02:09]]></wp:post_date_gmt>
		<wp:post_modified><![CDATA[2025-04-06 22:02:57]]></wp:post_modified>
		<wp:post_modified_gmt><![CDATA[2025-04-06 12:02:57]]></wp:post_modified_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[displaying-toast-messages-in-svelte-5]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
										<category domain="post_tag" nicename="development"><![CDATA[development]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="programming"><![CDATA[programming]]></category>
		<category domain="category" nicename="svelte"><![CDATA[Svelte]]></category>
		<category domain="post_tag" nicename="web-development"><![CDATA[web-development]]></category>
						<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_850d96727c0b0c901508c636ac6e60692c4ea958]]></wp:meta_key>
		<wp:meta_value><![CDATA[
				[contact-field label="Name" type="name"  required="true" /]
				[contact-field label="Email" type="email" required="true" /]
				[contact-field label="Website" type="url" /]
				[contact-field label="Message" type="textarea" /]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_g_feedback_shortcode_atts_850d96727c0b0c901508c636ac6e60692c4ea958]]></wp:meta_key>
		<wp:meta_value><![CDATA[a:17:{s:2:"to";s:22:"dejanvasic24@gmail.com";s:7:"subject";s:32:"[Software engineering notebook] ";s:12:"show_subject";s:2:"no";s:6:"widget";i:0;s:14:"block_template";N;s:19:"block_template_part";N;s:2:"id";i:1072;s:18:"submit_button_text";s:6:"Submit";s:14:"customThankyou";s:0:"";s:21:"customThankyouHeading";s:26:"Your message has been sent";s:21:"customThankyouMessage";s:30:"Thank you for your submission!";s:22:"customThankyouRedirect";s:0:"";s:10:"jetpackCRM";b:1;s:9:"className";N;s:9:"postToUrl";N;s:14:"salesforceData";N;s:12:"hiddenFields";N;}]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_last_editor_used_jetpack]]></wp:meta_key>
		<wp:meta_value><![CDATA[block-editor]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[reader_suggested_tags]]></wp:meta_key>
		<wp:meta_value><![CDATA[["Javascript","Programming","React","Web Development","Development"]]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[firehose_sent]]></wp:meta_key>
		<wp:meta_value><![CDATA[1743940931]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[1084]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[timeline_notification]]></wp:meta_key>
		<wp:meta_value><![CDATA[1743940932]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_publicize_job_id]]></wp:meta_key>
		<wp:meta_value><![CDATA[103059783531]]></wp:meta_value>
		</wp:postmeta>
							<wp:postmeta>
		<wp:meta_key><![CDATA[_elasticsearch_data_sharing_indexed_on]]></wp:meta_key>
		<wp:meta_value><![CDATA[2025-04-06 11:57:36]]></wp:meta_value>
		</wp:postmeta>
							</item>
				</channel>
</rss>
	